
const { createClient } = require('@supabase/supabase-js');

// Initialiser le client Supabase avec vos identifiants
const supabaseUrl = process.env.SUPABASE_URL;
const supabaseKey = process.env.SUPABASE_ANON_KEY;
const supabase = createClient(supabaseUrl, supabaseKey);

const PYTHON_LANGUAGE_ID = 'python'; // Remplacez par l'ID r√©el dans votre base de donn√©es

const pythonSummary = {
  title: "Concepts fondamentaux en Python",
  content: `# 1. D√©claration des variables en Python

Qu'est-ce qu'une variable ?
Une variable est un espace m√©moire o√π l'on stocke une donn√©e. Elle permet de conserver une information et de la r√©utiliser plus tard dans le programme.

Imagine une bo√Æte o√π tu ranges un objet. Si tu √©cris "Nom" sur la bo√Æte et que tu mets un papier avec "Yassmine" √† l'int√©rieur, cette bo√Æte devient une variable qui contient la valeur "Yassmine".

En Python, il est tr√®s simple de cr√©er une variable :

\`\`\`python
nom = "Yassmine"  # Une variable contenant du texte
age = 19  # Une variable contenant un nombre entier
prix = 99.99  # Une variable contenant un nombre d√©cimal
est_actif = True  # Une variable contenant une valeur bool√©enne (Vrai ou Faux)
\`\`\`

üí° Remarque importante :

Python d√©tecte automatiquement le type de la variable.

Contrairement √† d'autres langages comme Java ou C, on ne d√©clare pas le type (ex: int, string).

Par exemple, dans Java, il faut √©crire :

\`\`\`java
String nom = "Yassmine";
int age = 19;
\`\`\`

Mais en Python, il suffit de faire :

\`\`\`python
nom = "Yassmine"
age = 19
\`\`\`

C'est plus simple et plus rapide !

# 2. Les conditions en Python

Les conditions permettent d'ex√©cuter des instructions uniquement si certaines situations sont vraies.
Par exemple, si tu veux savoir si une personne peut entrer dans une bo√Æte de nuit, tu vas poser une condition :

Si elle a 18 ans ou plus, elle peut entrer.

Sinon, elle ne peut pas entrer.

En Python, cela s'√©crit comme ceci :

\`\`\`python
age = 19

if age >= 18:  # Si l'√¢ge est sup√©rieur ou √©gal √† 18
    print("Vous √™tes majeur, vous pouvez entrer.")  
else:  # Sinon
    print("Vous √™tes mineur, l'entr√©e est interdite.")
\`\`\`

üîπ Explication du code :

if signifie "si", il teste une condition.

>= signifie "sup√©rieur ou √©gal √†".

else signifie "sinon", c'est-√†-dire que si la condition n'est pas respect√©e, on ex√©cute le code qui suit.

## Ajout de plusieurs conditions avec elif

Parfois, il faut tester plusieurs cas. Par exemple, si on veut classer une note :

Si la note est sup√©rieure ou √©gale √† 18 ‚Üí "Excellent"

Sinon si la note est entre 14 et 17 ‚Üí "Bien"

Sinon si la note est entre 10 et 13 ‚Üí "Passable"

Sinon ‚Üí "√âchec"

Voici le code Python correspondant :

\`\`\`python
note = 15

if note >= 18:
    print("Excellent")
elif note >= 14:  # Sinon si la note est entre 14 et 17
    print("Bien")
elif note >= 10:  # Sinon si la note est entre 10 et 13
    print("Passable")
else:  # Si la note est en dessous de 10
    print("√âchec")
\`\`\`

üîπ Pourquoi elif ?

elif signifie "sinon si", il permet d'ajouter d'autres conditions.

Le programme teste les conditions dans l'ordre et s'arr√™te d√®s qu'une condition est vraie.

## Les conditions multiples avec and et or

On peut combiner plusieurs conditions :

and (ET) ‚Üí Les deux conditions doivent √™tre vraies.

or (OU) ‚Üí Au moins une des conditions doit √™tre vraie.

Exemple avec and :

\`\`\`python
age = 20
argent = 50

if age >= 18 and argent >= 100:  # Les DEUX conditions doivent √™tre vraies
    print("Vous pouvez entrer dans la bo√Æte de nuit.")
else:
    print("Vous ne pouvez pas entrer.")
\`\`\`

Ici, pour entrer :
‚úîÔ∏è Il faut avoir au moins 18 ans ET au moins 100‚Ç¨.
Si l'une des conditions est fausse, l'entr√©e est refus√©e.

Exemple avec or :

\`\`\`python
carte_membre = False
argent = 150

if carte_membre or argent >= 100:  # UNE des conditions doit √™tre vraie
    print("Vous avez acc√®s √† la salle VIP !")
else:
    print("Acc√®s refus√©.")
\`\`\`

Ici, on peut acc√©der √† la salle VIP SI :
‚úîÔ∏è On a une carte membre OU on a plus de 100‚Ç¨.

# 3. Les fonctions en Python

Une fonction est un morceau de code qui r√©alise une t√¢che pr√©cise.
Au lieu d'√©crire le m√™me code plusieurs fois, on le met dans une fonction et on l'appelle quand on en a besoin.

üí° Pourquoi utiliser une fonction ?
‚úÖ √âvite les r√©p√©titions de code.
‚úÖ Rend le programme plus clair et mieux organis√©.
‚úÖ Permet de r√©utiliser le code facilement.

## Cr√©er et utiliser une fonction simple

Une fonction en Python se d√©finit avec le mot-cl√© def suivi du nom de la fonction et des parenth√®ses ().

\`\`\`python
def dire_bonjour():
    print("Bonjour, bienvenue en Python !")

# Appel de la fonction
dire_bonjour()
\`\`\`

üîπ Explication :

def dire_bonjour(): cr√©e une fonction appel√©e dire_bonjour.

√Ä l'int√©rieur, print() affiche un message.

Pour ex√©cuter la fonction, on l'appelle avec dire_bonjour().

## Fonctions avec param√®tres

Une fonction peut recevoir des informations gr√¢ce aux param√®tres.

\`\`\`python
def saluer(nom):
    print(f"Bonjour, {nom} !")

saluer("Yassmine")  # Bonjour, Yassmine !
saluer("Ahmed")  # Bonjour, Ahmed !
\`\`\`

üîπ Ici, nom est un param√®tre, il permet de passer un pr√©nom √† la fonction.

## Fonctions qui retournent une valeur (return)

Parfois, une fonction doit renvoyer un r√©sultat qu'on peut utiliser dans le programme.
On utilise return pour renvoyer une valeur.

\`\`\`python
def additionner(a, b):
    return a + b  # Retourne la somme

somme = additionner(5, 7)
print(somme)  # Affiche 12
\`\`\`

üîπ additionner(a, b) renvoie a + b, puis on stocke ce r√©sultat dans somme.

## Fonctions avec param√®tres par d√©faut

Une fonction peut avoir un param√®tre avec une valeur par d√©faut.

\`\`\`python
def presentation(nom, age=18):
    print(f"Je m'appelle {nom} et j'ai {age} ans.")

presentation("Yassmine")  # Valeur par d√©faut : 18 ans
presentation("Ahmed", 20)  # Remplace 18 par 20
\`\`\`

Si aucun √¢ge n'est donn√©, Python prend 18 par d√©faut.

# Conclusion

On a vu trois concepts essentiels en Python :
‚úîÔ∏è Les variables ‚Üí Stocker des valeurs.
‚úîÔ∏è Les conditions ‚Üí Ex√©cuter un code selon une situation.
‚úîÔ∏è Les fonctions ‚Üí Organiser le code pour √©viter les r√©p√©titions.

Ces notions sont la base de tout programme en Python !`
};

async function updatePythonSummary() {
  // V√©rifier si un r√©sum√© Python existe d√©j√†
  const { data: existingSummary, error: fetchError } = await supabase
    .from('language_summaries')
    .select('*')
    .eq('language_id', PYTHON_LANGUAGE_ID)
    .maybeSingle();

  if (fetchError) {
    console.error('Erreur lors de la v√©rification du r√©sum√©:', fetchError);
    return;
  }

  if (existingSummary) {
    // Mettre √† jour le r√©sum√© existant
    const { error: updateError } = await supabase
      .from('language_summaries')
      .update({
        title: pythonSummary.title,
        content: pythonSummary.content
      })
      .eq('id', existingSummary.id);

    if (updateError) {
      console.error('Erreur lors de la mise √† jour du r√©sum√©:', updateError);
    } else {
      console.log('R√©sum√© Python mis √† jour avec succ√®s!');
    }
  } else {
    // Ins√©rer un nouveau r√©sum√©
    const { error: insertError } = await supabase
      .from('language_summaries')
      .insert([{
        language_id: PYTHON_LANGUAGE_ID,
        title: pythonSummary.title,
        content: pythonSummary.content
      }]);

    if (insertError) {
      console.error('Erreur lors de l\'insertion du r√©sum√©:', insertError);
    } else {
      console.log('R√©sum√© Python ins√©r√© avec succ√®s!');
    }
  }
}

updatePythonSummary()
  .catch(console.error)
  .finally(() => {
    console.log('Script termin√©');
  });
