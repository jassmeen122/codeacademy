
// Script to seed all language summaries
import { supabase } from '../integrations/supabase/client';

const programmingLanguages = [
  {
    name: 'Python',
    description: 'Python est un langage de programmation polyvalent, id√©al pour les d√©butants. Il est utilis√© dans de nombreux domaines comme l\'intelligence artificielle, le d√©veloppement web et l\'analyse de donn√©es.',
    image_url: 'https://upload.wikimedia.org/wikipedia/commons/thumb/c/c3/Python-logo-notext.svg/1869px-Python-logo-notext.svg.png',
    color: '#306998',
    icon: 'code'
  },
  {
    name: 'JavaScript',
    description: 'JavaScript est un langage de programmation essentiel pour le d√©veloppement web. Il permet de cr√©er des sites web interactifs et est utilis√© tant c√¥t√© client que c√¥t√© serveur avec Node.js.',
    image_url: 'https://upload.wikimedia.org/wikipedia/commons/thumb/6/6a/JavaScript-logo.png/800px-JavaScript-logo.png',
    color: '#f7df1e',
    icon: 'code'
  },
  {
    name: 'Java',
    description: 'Java est un langage orient√© objet tr√®s populaire, utilis√© principalement pour le d√©veloppement d\'applications Android et de syst√®mes d\'entreprise.',
    image_url: 'https://upload.wikimedia.org/wikipedia/en/thumb/3/30/Java_programming_language_logo.svg/1200px-Java_programming_language_logo.svg.png',
    color: '#f89820',
    icon: 'coffee'
  },
  {
    name: 'C',
    description: 'C est un langage de programmation puissant et efficace, utilis√© pour d√©velopper des syst√®mes d\'exploitation, des compilateurs et des applications performantes.',
    image_url: 'https://upload.wikimedia.org/wikipedia/commons/1/19/C_Logo.png',
    color: '#5c6bc0',
    icon: 'code'
  },
  {
    name: 'C++',
    description: 'C++ est une extension du langage C qui ajoute des fonctionnalit√©s de programmation orient√©e objet. Il est utilis√© dans le d√©veloppement de jeux vid√©o, de syst√®mes embarqu√©s et d\'applications hautes performances.',
    image_url: 'https://upload.wikimedia.org/wikipedia/commons/thumb/1/18/ISO_C%2B%2B_Logo.svg/1200px-ISO_C%2B%2B_Logo.svg.png',
    color: '#00599c',
    icon: 'code'
  },
  {
    name: 'PHP',
    description: 'PHP est un langage de script c√¥t√© serveur con√ßu pour le d√©veloppement web, mais √©galement utilis√© comme langage de programmation g√©n√©raliste.',
    image_url: 'https://upload.wikimedia.org/wikipedia/commons/thumb/2/27/PHP-logo.svg/2560px-PHP-logo.svg.png',
    color: '#8892bf',
    icon: 'code'
  },
  {
    name: 'SQL',
    description: 'SQL est le langage standard pour g√©rer et manipuler les bases de donn√©es. Il est crucial pour les d√©veloppeurs travaillant avec des syst√®mes de gestion de bases de donn√©es relationnelles.',
    image_url: 'https://upload.wikimedia.org/wikipedia/commons/8/87/Sql_data_base_with_logo.png',
    color: '#f29111',
    icon: 'database'
  }
];

const summaryContents = {
  'Python': `1. Introduction √† Python
Python est un langage de programmation polyvalent cr√©√© par Guido van Rossum. Il est connu pour sa syntaxe claire et lisible, ce qui en fait un excellent choix pour les d√©butants.

üîπ Caract√©ristiques principales :
- Langage interpr√©t√© (pas besoin de compiler)
- Syntaxe simple et lisible
- Typage dynamique (pas besoin de d√©clarer les types)
- Riche en biblioth√®ques

2. Variables et Types de Donn√©es
Python utilise un typage dynamique, ce qui signifie que vous n'avez pas besoin de d√©clarer le type de vos variables.

üîπ D√©claration des variables
# D√©claration simple
nom = "Yassmine"  # cha√Æne de caract√®res (string)
age = 19          # entier (integer)
taille = 1.65     # nombre √† virgule flottante (float)
est_etudiant = True  # bool√©en (boolean)

print("Je m'appelle", nom, "et j'ai", age, "ans.")

üîπ Types de donn√©es principales
Type	Exemple	Description
string	"Bonjour"	Texte
int	42	Nombre entier
float	3.14	Nombre d√©cimal
bool	True/False	Valeur bool√©enne
list	[1, 2, 3]	Collection ordonn√©e
tuple	(1, 2, 3)	Collection immuable
dict	{"nom": "Ali"}	Paires cl√©-valeur

3. Conditions en Python
Python utilise des instructions if, elif et else pour les conditions.

üîπ Structure de base
age = 19

if age < 18:
    print("Vous √™tes mineur.")
elif age == 18:
    print("Vous venez d'atteindre la majorit√©.")
else:
    print("Vous √™tes majeur.")

üîπ Op√©rateurs de comparaison
==  # √©gal √†
!=  # diff√©rent de
<   # inf√©rieur √†
>   # sup√©rieur √†
<=  # inf√©rieur ou √©gal √†
>=  # sup√©rieur ou √©gal √†

üîπ Op√©rateurs logiques
and  # ET logique
or   # OU logique
not  # NON logique

4. Boucles en Python
Python propose deux types de boucles: for et while.

üîπ Boucle for
# Parcourir une liste
fruits = ["pomme", "banane", "orange"]
for fruit in fruits:
    print(fruit)

# Parcourir une plage de nombres
for i in range(5):  # 0, 1, 2, 3, 4
    print(i)

üîπ Boucle while
compteur = 0
while compteur < 5:
    print(compteur)
    compteur += 1  # incr√©mentation

5. Fonctions en Python
Les fonctions sont d√©finies avec le mot-cl√© def.

üîπ D√©finition de base
def saluer(nom):
    """Cette fonction affiche un message de salutation."""
    print(f"Bonjour, {nom}!")

# Appel de la fonction
saluer("Yassmine")

üîπ Fonctions avec valeur de retour
def additionner(a, b):
    return a + b

resultat = additionner(5, 3)
print(resultat)  # Affiche 8

6. Listes, Tuples et Dictionnaires
Python offre plusieurs structures de donn√©es int√©gr√©es.

üîπ Listes (modifiables)
fruits = ["pomme", "banane", "orange"]
fruits.append("raisin")  # Ajouter un √©l√©ment
fruits[0] = "kiwi"       # Modifier un √©l√©ment
print(fruits)

üîπ Tuples (non modifiables)
coordonnees = (10, 20)
# coordonnees[0] = 15  # Erreur: les tuples sont immuables

üîπ Dictionnaires (paires cl√©-valeur)
personne = {
    "nom": "Dalil",
    "age": 19,
    "ville": "Casablanca"
}
print(personne["nom"])  # Acc√©der √† une valeur
personne["email"] = "example@email.com"  # Ajouter une paire

7. Modules et Biblioth√®ques
Python poss√®de une vaste biblioth√®que standard et de nombreux modules tiers.

üîπ Importation de modules
# Module de la biblioth√®que standard
import math
print(math.sqrt(16))  # Racine carr√©e: 4.0

# Importation sp√©cifique
from datetime import datetime
print(datetime.now())  # Date et heure actuelles

8. Gestion des Exceptions
Python permet de g√©rer les erreurs avec try, except, finally.

üîπ Structure try-except
try:
    nombre = int(input("Entrez un nombre: "))
    resultat = 10 / nombre
    print(resultat)
except ZeroDivisionError:
    print("Erreur: Division par z√©ro!")
except ValueError:
    print("Erreur: Veuillez entrer un nombre valide!")
finally:
    print("Op√©ration termin√©e.")

9. Utilisation Pratique
Python est utilis√© dans de nombreux domaines:

üîπ Analyse de donn√©es
import pandas as pd
# Cr√©er un DataFrame
donnees = pd.DataFrame({
    'Nom': ['Ali', 'Sara', 'Karim'],
    'Age': [22, 25, 23]
})
print(donnees)

üîπ Intelligence artificielle
# Exemple simplifi√© avec scikit-learn
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
import numpy as np

# Donn√©es fictives
X = np.array([[1], [2], [3], [4]])  # Caract√©ristiques
y = np.array([2, 4, 6, 8])          # Cibles

# Cr√©ation du mod√®le
modele = LinearRegression()
modele.fit(X, y)

# Pr√©diction
prediction = modele.predict([[5]])
print(f"Pr√©diction pour 5: {prediction[0]}")`,
  
  'JavaScript': `1. D√©claration des variables en JavaScript
Qu'est-ce qu'une variable ?
Une variable est un espace en m√©moire o√π l'on stocke une donn√©e. Contrairement √† Java, JavaScript est un langage dynamique, ce qui signifie qu'on n'a pas besoin de pr√©ciser le type de donn√©es (comme en Python).

Les trois fa√ßons de d√©clarer une variable en JavaScript
Il existe trois mots-cl√©s pour d√©clarer une variable :

var (ancienne m√©thode, √† √©viter)

let (m√©thode recommand√©e)

const (pour les valeurs constantes)

Exemple :
var nom = "Yassmine"; // Ancienne mani√®re (peut poser des probl√®mes)
let age = 19;         // Nouvelle mani√®re, recommand√©e
const pays = "Maroc"; // Une valeur qui ne changera pas

Quelle est la diff√©rence entre var, let et const ?
Mot-cl√©	Modification possible ?	Port√©e (scope)
var	Oui	Fonction
let	Oui	Bloc {}
const	Non	Bloc {}

üí° Conseil :

Utilise let pour les variables qui peuvent changer.

Utilise const si la valeur ne doit jamais changer.

√âvite var, car il peut cr√©er des bugs.

2. Conditions en JavaScript
Une condition permet d'ex√©cuter un code seulement si une certaine situation est vraie.

Condition if simple
let age = 19;

if (age >= 18) {
    console.log("Vous √™tes majeur.");
}

üí° Explication :

Si age est sup√©rieur ou √©gal √† 18, alors on affiche "Vous √™tes majeur.".

Condition if...else
let age = 16;

if (age >= 18) {
    console.log("Vous √™tes majeur.");
} else {
    console.log("Vous √™tes mineur.");
}

üí° Explication :

Si age est inf√©rieur √† 18, alors on affiche "Vous √™tes mineur.".

Condition if...else if...else
Si on veut tester plusieurs cas, on utilise else if :

let note = 15;

if (note >= 18) {
    console.log("Excellent !");
} else if (note >= 14) {
    console.log("Bien !");
} else if (note >= 10) {
    console.log("Passable.");
} else {
    console.log("√âchec.");
}

üí° Explication :

Si note est sup√©rieure ou √©gale √† 18, on affiche "Excellent".

Sinon, si note >= 14, on affiche "Bien".

Sinon, si note >= 10, on affiche "Passable".

Sinon, on affiche "√âchec".

Conditions avec && et ||
Comme en Java :

&& (ET logique) ‚Üí Les deux conditions doivent √™tre vraies.

|| (OU logique) ‚Üí Au moins une condition doit √™tre vraie.

Exemple avec && (ET logique)
let argent = 50;
let age = 20;

if (age >= 18 && argent >= 100) {
    console.log("Vous pouvez entrer en bo√Æte.");
} else {
    console.log("Acc√®s refus√©.");
}

üí° Explication :
‚úîÔ∏è La personne doit avoir plus de 18 ans ET au moins 100‚Ç¨.

Exemple avec || (OU logique)
let carteMembre = false;
let argent = 150;

if (carteMembre || argent >= 100) {
    console.log("Acc√®s VIP accord√©.");
} else {
    console.log("Acc√®s refus√©.");
}

üí° Explication :
‚úîÔ∏è Si la personne a une carte membre OU si elle a au moins 100‚Ç¨, elle peut entrer.

3. Fonctions en JavaScript
Une fonction est un bloc de code qui effectue une action et peut √™tre r√©utilis√© plusieurs fois.

Cr√©er une fonction sans param√®tres
function direBonjour() {
    console.log("Bonjour, bienvenue !");
}

// Appel de la fonction
direBonjour();

üí° Explication :

function direBonjour() ‚Üí D√©finit une fonction nomm√©e direBonjour.

console.log("Bonjour, bienvenue !") ‚Üí Affiche "Bonjour, bienvenue !".

Fonctions avec param√®tres
function saluer(nom) {
    console.log("Bonjour, " + nom + " !");
}

// Appel de la fonction
saluer("Yassmine");
saluer("Ahmed");

üí° Explication :

La fonction saluer(nom) prend un param√®tre nom.

Elle affiche "Bonjour, Yassmine !", "Bonjour, Ahmed !", etc.

Fonctions qui retournent une valeur
function additionner(a, b) {
    return a + b;
}

// Stocker le r√©sultat et l'afficher
let resultat = additionner(5, 7);
console.log(resultat);  // Affiche 12

üí° Explication :

La fonction additionne deux nombres et retourne le r√©sultat.

La valeur est stock√©e dans resultat et affich√©e avec console.log().

Fonctions fl√©ch√©es (Arrow Functions)
Depuis ES6, JavaScript propose une nouvelle fa√ßon d'√©crire des fonctions plus courte :

const multiplier = (x, y) => x * y;

console.log(multiplier(3, 4));  // Affiche 12

üí° Explication :

(x, y) => x * y; est une fonction fl√©ch√©e.

Elle est √©quivalente √† :

function multiplier(x, y) {
    return x * y;
}

4. Diff√©rences entre JavaScript et Java
Caract√©ristique	Java	JavaScript
Type de langage	Langage compil√©	Langage interpr√©t√©
D√©claration des variables	int x = 5; (typ√©)	let x = 5; (dynamique)
Syntaxe des fonctions	public static void fonction()	function fonction()
Utilisation principale	Applications (Desktop, Android)	Web (Frontend & Backend)
Ex√©cution	N√©cessite un compilateur (javac)	Directement dans le navigateur`,
  
  'Java': `1. Introduction √† Java
Java est un langage de programmation orient√© objet cr√©√© par Sun Microsystems (maintenant Oracle) en 1995. Il est con√ßu pour √™tre portable et peut s'ex√©cuter sur diff√©rentes plateformes gr√¢ce √† la machine virtuelle Java (JVM).

üîπ Caract√©ristiques principales :
- Langage orient√© objet
- Multiplateforme (Write Once, Run Anywhere)
- Typage statique (les types de variables doivent √™tre d√©clar√©s)
- Gestion automatique de la m√©moire (garbage collection)

2. Structure d'un programme Java
Tout programme Java doit contenir au moins une classe avec une m√©thode main.

üîπ Structure de base
public class MonProgramme {
    public static void main(String[] args) {
        System.out.println("Bonjour, monde !");
    }
}

üí° Explication :
- public class MonProgramme : d√©finit une classe nomm√©e MonProgramme
- public static void main(String[] args) : m√©thode principale qui est ex√©cut√©e lors du lancement
- System.out.println() : affiche du texte dans la console

3. Variables et Types de Donn√©es
Java est un langage √† typage statique, ce qui signifie que vous devez sp√©cifier le type de chaque variable.

üîπ Types primitifs
Type	Description	Exemple
int	Entier (32 bits)	int age = 25;
double	Nombre √† virgule flottante	double prix = 19.99;
boolean	Valeur bool√©enne	boolean estVrai = true;
char	Caract√®re unique	char lettre = 'A';
byte	Entier (8 bits)	byte petit = 127;
short	Entier (16 bits)	short moyen = 32000;
long	Entier (64 bits)	long grand = 9223372036854775807L;
float	Flottant (32 bits)	float decimal = 3.14f;

üîπ D√©claration de variables
int age = 19;
String nom = "Yassmine";
double taille = 1.65;
boolean estEtudiant = true;

System.out.println("Je m'appelle " + nom + " et j'ai " + age + " ans.");

4. Op√©rateurs
Java offre une vari√©t√© d'op√©rateurs similaires √† ceux des autres langages.

üîπ Op√©rateurs arithm√©tiques
+    // Addition
-    // Soustraction
*    // Multiplication
/    // Division
%    // Modulo (reste de la division)
++   // Incr√©mentation
--   // D√©cr√©mentation

üîπ Op√©rateurs de comparaison
==   // √âgal √†
!=   // Diff√©rent de
>    // Sup√©rieur √†
<    // Inf√©rieur √†
>=   // Sup√©rieur ou √©gal √†
<=   // Inf√©rieur ou √©gal √†

üîπ Op√©rateurs logiques
&&   // ET logique
||   // OU logique
!    // NON logique

5. Structures conditionnelles
Java utilise des structures similaires √† la plupart des langages.

üîπ If-else
int age = 19;

if (age < 18) {
    System.out.println("Vous √™tes mineur.");
} else if (age == 18) {
    System.out.println("Vous venez tout juste d'√™tre majeur.");
} else {
    System.out.println("Vous √™tes majeur.");
}

üîπ Switch
int jour = 3;
String nomJour;

switch (jour) {
    case 1:
        nomJour = "Lundi";
        break;
    case 2:
        nomJour = "Mardi";
        break;
    case 3:
        nomJour = "Mercredi";
        break;
    // ... autres jours
    default:
        nomJour = "Jour invalide";
}

System.out.println("Aujourd'hui c'est " + nomJour);

6. Boucles
Java offre plusieurs types de boucles pour r√©p√©ter des blocs de code.

üîπ Boucle for
for (int i = 0; i < 5; i++) {
    System.out.println("It√©ration " + i);
}

üîπ Boucle while
int compteur = 0;
while (compteur < 5) {
    System.out.println("Compteur : " + compteur);
    compteur++;
}

üîπ Boucle do-while
int nombre = 1;
do {
    System.out.println("Nombre : " + nombre);
    nombre++;
} while (nombre <= 5);

üîπ Boucle for-each (pour parcourir des collections)
String[] fruits = {"Pomme", "Banane", "Orange"};
for (String fruit : fruits) {
    System.out.println(fruit);
}

7. Tableaux et collections
Java propose diverses fa√ßons de stocker des groupes de donn√©es.

üîπ Tableaux
// D√©claration et initialisation
int[] nombres = {1, 2, 3, 4, 5};

// Acc√®s aux √©l√©ments
System.out.println("Premier √©l√©ment : " + nombres[0]);

// Tableaux √† plusieurs dimensions
int[][] matrice = {
    {1, 2, 3},
    {4, 5, 6},
    {7, 8, 9}
};

System.out.println(matrice[1][1]); // Affiche 5

üîπ ArrayList (collection dynamique)
import java.util.ArrayList;

ArrayList<String> liste = new ArrayList<>();
liste.add("Pomme");
liste.add("Banane");
liste.add("Orange");

System.out.println(liste.get(1)); // Affiche "Banane"
System.out.println(liste.size()); // Affiche 3

liste.remove("Banane");
System.out.println(liste); // Affiche [Pomme, Orange]

8. M√©thodes (Fonctions)
En Java, les fonctions sont appel√©es m√©thodes et doivent √™tre d√©finies dans une classe.

üîπ D√©finition et appel de m√©thodes
public class Calculatrice {
    // M√©thode sans param√®tres et sans retour
    public static void afficherMessage() {
        System.out.println("Bienvenue dans la calculatrice !");
    }
    
    // M√©thode avec param√®tres et retour
    public static int additionner(int a, int b) {
        return a + b;
    }
    
    public static void main(String[] args) {
        afficherMessage();
        int somme = additionner(5, 3);
        System.out.println("5 + 3 = " + somme);
    }
}

9. Programmation Orient√©e Objet (POO)
Java est centr√© sur la POO, qui permet de structurer le code en objets.

üîπ Classes et Objets
// D√©finition d'une classe
public class Personne {
    // Attributs
    private String nom;
    private int age;
    
    // Constructeur
    public Personne(String nom, int age) {
        this.nom = nom;
        this.age = age;
    }
    
    // M√©thodes
    public void sePresenter() {
        System.out.println("Bonjour, je m'appelle " + nom + " et j'ai " + age + " ans.");
    }
    
    // Getters et Setters
    public String getNom() {
        return nom;
    }
    
    public void setNom(String nom) {
        this.nom = nom;
    }
    
    public int getAge() {
        return age;
    }
    
    public void setAge(int age) {
        this.age = age;
    }
}

// Utilisation de la classe
public class Main {
    public static void main(String[] args) {
        Personne personne1 = new Personne("Yassmine", 19);
        personne1.sePresenter();
        
        // Modification d'attributs
        personne1.setAge(20);
        System.out.println("Nouvel √¢ge : " + personne1.getAge());
    }
}

10. H√©ritage et Polymorphisme
Java permet l'h√©ritage entre classes, ce qui facilite la r√©utilisation du code.

üîπ H√©ritage
// Classe parent
public class Animal {
    protected String nom;
    
    public Animal(String nom) {
        this.nom = nom;
    }
    
    public void manger() {
        System.out.println(nom + " est en train de manger.");
    }
}

// Classe enfant
public class Chien extends Animal {
    private String race;
    
    public Chien(String nom, String race) {
        super(nom); // Appel du constructeur parent
        this.race = race;
    }
    
    public void aboyer() {
        System.out.println(nom + " aboie !");
    }
    
    // Surcharge (override) de la m√©thode parent
    @Override
    public void manger() {
        System.out.println(nom + " le chien mange des croquettes.");
    }
}

// Utilisation
public class Main {
    public static void main(String[] args) {
        Chien monChien = new Chien("Rex", "Berger Allemand");
        monChien.manger(); // M√©thode surcharg√©e
        monChien.aboyer(); // M√©thode sp√©cifique
    }
}

11. Exception Handling
Java permet de g√©rer les exceptions pour traiter les erreurs.

üîπ Try-Catch
try {
    int[] nombres = {1, 2, 3};
    System.out.println(nombres[5]); // Index hors limites
} catch (ArrayIndexOutOfBoundsException e) {
    System.out.println("Erreur: Index hors limites");
} finally {
    System.out.println("Ce bloc est toujours ex√©cut√©");
}

12. Entr√©es/Sorties
Java fournit diverses m√©thodes pour lire les entr√©es utilisateur et √©crire des sorties.

üîπ Lecture des entr√©es
import java.util.Scanner;

public class EntreeUtilisateur {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        
        System.out.print("Entrez votre nom : ");
        String nom = scanner.nextLine();
        
        System.out.print("Entrez votre √¢ge : ");
        int age = scanner.nextInt();
        
        System.out.println("Bonjour, " + nom + ". Vous avez " + age + " ans.");
        
        scanner.close(); // Toujours fermer le scanner
    }
}`,
  
  'C': `1. Introduction au langage C
Le langage C est un langage de programmation proc√©dural cr√©√© en 1972 par Dennis Ritchie chez Bell Labs. C'est un langage de bas niveau qui offre un contr√¥le direct sur la m√©moire et le mat√©riel.

üîπ Caract√©ristiques principales :
- Langage compil√© (le code est traduit en langage machine avant ex√©cution)
- Syntaxe concise et efficace
- Acc√®s direct √† la m√©moire
- Grande portabilit√©
- Utilis√© pour le d√©veloppement syst√®me, les embarqu√©s, et les applications performantes

2. Structure d'un programme C
Tout programme C doit avoir une fonction main qui sert de point d'entr√©e.

üîπ Structure de base
#include <stdio.h>  // Inclusion de biblioth√®que

int main() {
    // Corps du programme
    printf("Bonjour, monde !\n");
    
    return 0;  // Code de retour (0 = succ√®s)
}

üí° Explication :
- #include <stdio.h> : Inclusion de la biblioth√®que standard d'entr√©e/sortie
- int main() : Fonction principale retournant un entier
- printf() : Fonction pour afficher du texte
- return 0 : Indique que le programme s'est termin√© correctement

3. Variables et Types de Donn√©es
Le C est un langage √† typage statique, ce qui signifie que le type de chaque variable doit √™tre d√©clar√©.

üîπ Types de base
Type	Description	Exemple
int	Entier	int age = 25;
float	Nombre √† virgule flottante	float prix = 19.99f;
double	Nombre √† virgule flottante (pr√©cision double)	double pi = 3.14159265359;
char	Caract√®re unique	char lettre = 'A';

üîπ D√©claration de variables
int age = 19;
float taille = 1.75f;
char premiere_lettre = 'Y';
double pi = 3.14159;

printf("J'ai %d ans et je mesure %.2f m√®tres.\n", age, taille);

üîπ Constantes
#define PI 3.14159  // D√©finition de constante pr√©processeur

const int TAILLE_MAX = 100;  // Constante en C moderne

4. Op√©rateurs
Le C offre une vari√©t√© d'op√©rateurs similaires √† ceux d'autres langages.

üîπ Op√©rateurs arithm√©tiques
+    // Addition
-    // Soustraction
*    // Multiplication
/    // Division
%    // Modulo (reste de la division)
++   // Incr√©mentation
--   // D√©cr√©mentation

üîπ Op√©rateurs de comparaison
==   // √âgal √†
!=   // Diff√©rent de
>    // Sup√©rieur √†
<    // Inf√©rieur √†
>=   // Sup√©rieur ou √©gal √†
<=   // Inf√©rieur ou √©gal √†

üîπ Op√©rateurs logiques
&&   // ET logique
||   // OU logique
!    // NON logique

üîπ Op√©rateurs bit √† bit
&    // ET bit √† bit
|    // OU bit √† bit
^    // OU exclusif bit √† bit
~    // NON bit √† bit
<<   // D√©calage √† gauche
>>   // D√©calage √† droite

5. Structures conditionnelles
Le C utilise des structures similaires √† la plupart des langages.

üîπ If-else
int age = 19;

if (age < 18) {
    printf("Vous √™tes mineur.\n");
} else if (age == 18) {
    printf("Vous venez tout juste d'√™tre majeur.\n");
} else {
    printf("Vous √™tes majeur.\n");
}

üîπ Switch
int jour = 3;

switch (jour) {
    case 1:
        printf("Lundi\n");
        break;
    case 2:
        printf("Mardi\n");
        break;
    case 3:
        printf("Mercredi\n");
        break;
    // ... autres jours
    default:
        printf("Jour invalide\n");
}

üîπ Op√©rateur ternaire
int age = 20;
char* statut = (age >= 18) ? "majeur" : "mineur";
printf("Vous √™tes %s.\n", statut);

6. Boucles
Le C offre trois types principaux de boucles.

üîπ Boucle for
for (int i = 0; i < 5; i++) {
    printf("It√©ration %d\n", i);
}

üîπ Boucle while
int compteur = 0;
while (compteur < 5) {
    printf("Compteur : %d\n", compteur);
    compteur++;
}

üîπ Boucle do-while
int nombre = 1;
do {
    printf("Nombre : %d\n", nombre);
    nombre++;
} while (nombre <= 5);

7. Tableaux
Les tableaux en C sont des collections d'√©l√©ments du m√™me type stock√©s de mani√®re contigu√´ en m√©moire.

üîπ D√©claration et initialisation
// D√©claration et initialisation
int nombres[5] = {1, 2, 3, 4, 5};

// Acc√®s aux √©l√©ments
printf("Premier √©l√©ment : %d\n", nombres[0]);

// Tableaux √† plusieurs dimensions
int matrice[3][3] = {
    {1, 2, 3},
    {4, 5, 6},
    {7, 8, 9}
};

printf("√âl√©ment central : %d\n", matrice[1][1]); // Affiche 5

8. Cha√Ænes de caract√®res
En C, les cha√Ænes de caract√®res sont des tableaux de caract√®res termin√©s par le caract√®re nul ('\0').

üîπ D√©claration et manipulation
char nom[50] = "Yassmine";
printf("Bonjour, %s !\n", nom);

// Fonctions de manipulation de cha√Ænes (inclure <string.h>)
#include <string.h>

char prenom[20] = "Yassmine";
char nom[20] = "Dalil";
char nom_complet[40];

// Copie de cha√Æne
strcpy(nom_complet, prenom);

// Concat√©nation de cha√Ænes
strcat(nom_complet, " ");
strcat(nom_complet, nom);

printf("Nom complet : %s\n", nom_complet);

// Longueur d'une cha√Æne
int longueur = strlen(nom_complet);
printf("Longueur : %d\n", longueur);

9. Fonctions
Les fonctions permettent de diviser le code en blocs r√©utilisables.

üîπ D√©finition et appel de fonctions
// D√©claration (prototype) de fonction
int additionner(int a, int b);

int main() {
    int resultat = additionner(5, 3);
    printf("5 + 3 = %d\n", resultat);
    return 0;
}

// D√©finition de la fonction
int additionner(int a, int b) {
    return a + b;
}

üîπ Passage par valeur vs par r√©f√©rence
// Passage par valeur
void incrementer_valeur(int n) {
    n++; // Cette modification n'affecte pas la variable originale
}

// Passage par r√©f√©rence (en utilisant des pointeurs)
void incrementer_reference(int* n) {
    (*n)++; // Cette modification affecte la variable originale
}

int main() {
    int a = 5;
    incrementer_valeur(a);
    printf("Apr√®s incrementer_valeur : %d\n", a); // Affiche 5
    
    incrementer_reference(&a);
    printf("Apr√®s incrementer_reference : %d\n", a); // Affiche 6
    
    return 0;
}

10. Pointeurs
Les pointeurs sont des variables qui stockent des adresses m√©moire, permettant un acc√®s et une manipulation directs de la m√©moire.

üîπ D√©claration et utilisation
int n = 10;
int* p = &n; // p contient l'adresse de n

printf("Valeur de n : %d\n", n);
printf("Adresse de n : %p\n", &n);
printf("Contenu du pointeur p : %p\n", p);
printf("Valeur point√©e par p : %d\n", *p);

// Modification via le pointeur
*p = 20;
printf("Nouvelle valeur de n : %d\n", n); // Affiche 20

üîπ Arithm√©tique des pointeurs
int tableau[5] = {10, 20, 30, 40, 50};
int* ptr = tableau; // ptr pointe vers le premier √©l√©ment

// Acc√®s aux √©l√©ments via le pointeur
printf("Premier √©l√©ment : %d\n", *ptr);
printf("Deuxi√®me √©l√©ment : %d\n", *(ptr + 1));
printf("Troisi√®me √©l√©ment : %d\n", *(ptr + 2));

// Parcours du tableau avec arithm√©tique des pointeurs
for (int i = 0; i < 5; i++) {
    printf("√âl√©ment %d : %d\n", i, *(ptr + i));
}

11. Structures
Les structures permettent de regrouper diff√©rents types de donn√©es sous un seul nom.

üîπ D√©finition et utilisation
// D√©finition d'une structure
struct Personne {
    char nom[50];
    int age;
    float taille;
};

int main() {
    // D√©claration et initialisation
    struct Personne p1 = {"Yassmine", 19, 1.65f};
    
    // Acc√®s aux membres
    printf("Nom : %s\n", p1.nom);
    printf("Age : %d\n", p1.age);
    printf("Taille : %.2f m\n", p1.taille);
    
    // Modification des membres
    p1.age = 20;
    printf("Nouvel √¢ge : %d\n", p1.age);
    
    return 0;
}

üîπ Pointeurs vers des structures
struct Personne p1 = {"Yassmine", 19, 1.65f};
struct Personne* ptr = &p1;

// Acc√®s aux membres via le pointeur
printf("Nom (via pointeur) : %s\n", ptr->nom); // √âquivalent √† (*ptr).nom
printf("Age (via pointeur) : %d\n", ptr->age);

12. Allocation dynamique de m√©moire
Le C permet d'allouer et de lib√©rer de la m√©moire dynamiquement pendant l'ex√©cution du programme.

üîπ Fonctions d'allocation (inclure <stdlib.h>)
#include <stdlib.h>

// Allocation d'un entier
int* p = (int*) malloc(sizeof(int));
*p = 42;
printf("Valeur allou√©e : %d\n", *p);

// Allocation d'un tableau
int* tableau = (int*) malloc(5 * sizeof(int));
for (int i = 0; i < 5; i++) {
    tableau[i] = i * 10;
    printf("tableau[%d] = %d\n", i, tableau[i]);
}

// Liberation de la m√©moire (TR√àS IMPORTANT en C)
free(p);
free(tableau);

// Allocation avec calloc (initialise √† z√©ro)
int* nombres = (int*) calloc(5, sizeof(int));
// ...utilisation...
free(nombres);

// Redimensionnement avec realloc
tableau = (int*) realloc(tableau, 10 * sizeof(int));
// ...utilisation du tableau redimensionn√©...
free(tableau);

13. Fichiers
Le C permet de lire et d'√©crire des donn√©es dans des fichiers.

üîπ Op√©rations sur les fichiers (inclure <stdio.h>)
#include <stdio.h>

// √âcriture dans un fichier
FILE* fichier = fopen("exemple.txt", "w");
if (fichier != NULL) {
    fprintf(fichier, "Bonjour depuis C !\n");
    fprintf(fichier, "Nombre : %d\n", 42);
    fclose(fichier);
}

// Lecture d'un fichier
fichier = fopen("exemple.txt", "r");
if (fichier != NULL) {
    char ligne[100];
    while (fgets(ligne, sizeof(ligne), fichier) != NULL) {
        printf("Lu : %s", ligne);
    }
    fclose(fichier);
}

14. Pr√©processeur
Le pr√©processeur C traite le code avant la compilation proprement dite.

üîπ Directives du pr√©processeur
#include <stdio.h>  // Inclusion de biblioth√®que
#define PI 3.14159  // D√©finition de constante
#define CARRE(x) ((x) * (x))  // D√©finition de macro

// Compilation conditionnelle
#ifdef DEBUG
    #define LOG(msg) printf("DEBUG: %s\n", msg)
#else
    #define LOG(msg) // Ne fait rien en mode production
#endif

int main() {
    printf("Valeur de PI : %f\n", PI);
    printf("Carr√© de 5 : %d\n", CARRE(5));
    
    LOG("Programme en cours d'ex√©cution");
    
    return 0;
}`,
  
  'C++': `1. Introduction au C++
Le C++ est un langage de programmation cr√©√© par Bjarne Stroustrup en 1983 comme une extension du langage C. Il ajoute des fonctionnalit√©s de programmation orient√©e objet et de nombreuses am√©liorations par rapport au C.

üîπ Caract√©ristiques principales :
- Combines programmation proc√©durale et orient√©e objet
- Performance √©lev√©e et acc√®s bas niveau
- Typage statique fort
- Support des templates (programmation g√©n√©rique)
- Gestion manuelle de la m√©moire (avec options automatiques modernes)
- Utilis√© dans le d√©veloppement de jeux, syst√®mes embarqu√©s, applications hautes performances

2. Structure d'un programme C++
Similaire au C, un programme C++ commence par un point d'entr√©e main().

üîπ Structure de base
#include <iostream>  // Inclusion de biblioth√®que

int main() {
    // Corps du programme
    std::cout << "Bonjour, monde !" << std::endl;
    
    return 0;  // Code de retour (0 = succ√®s)
}

üí° Explication :
- #include <iostream> : Inclusion de la biblioth√®que d'entr√©e/sortie
- std::cout : Flux de sortie standard (√©cran)
- std::endl : Ins√®re une nouvelle ligne et vide le tampon

üîπ Utilisation de l'espace de nommage std
#include <iostream>
using namespace std;  // Permet d'utiliser cout sans pr√©fixe std::

int main() {
    cout << "C++ est puissant !" << endl;
    return 0;
}

3. Variables et Types de Donn√©es
Le C++ h√©rite des types de donn√©es du C et en ajoute de nouveaux.

üîπ Types de base
Type	Description	Exemple
int	Entier	int age = 25;
float	Nombre √† virgule flottante	float prix = 19.99f;
double	Nombre √† virgule flottante (pr√©cision double)	double pi = 3.14159265359;
char	Caract√®re unique	char lettre = 'A';
bool	Bool√©en	bool estVrai = true;

üîπ D√©claration de variables
int age = 19;
float taille = 1.75f;
char premiere_lettre = 'Y';
bool est_etudiant = true;
string nom = "Yassmine";  // N√©cessite #include <string>

cout << "Je m'appelle " << nom << " et j'ai " << age << " ans." << endl;

üîπ Constantes
#define PI 3.14159  // D√©finition de constante pr√©processeur (style C)

const double PI_CONST = 3.14159;  // Constante avec type (style C++ pr√©f√©r√©)
constexpr int TAILLE_MAX = 100;   // Constante √©valu√©e √† la compilation (C++11)

4. Entr√©es/Sorties
C++ utilise des flux (streams) pour les entr√©es/sorties.

üîπ Sortie standard (cout)
#include <iostream>
using namespace std;

int main() {
    int age = 19;
    string nom = "Yassmine";
    
    cout << "Bonjour, " << nom << "!" << endl;
    cout << "Vous avez " << age << " ans." << endl;
    
    return 0;
}

üîπ Entr√©e standard (cin)
#include <iostream>
#include <string>
using namespace std;

int main() {
    string nom;
    int age;
    
    cout << "Entrez votre nom : ";
    cin >> nom;
    
    cout << "Entrez votre √¢ge : ";
    cin >> age;
    
    cout << "Bonjour, " << nom << "! Vous avez " << age << " ans." << endl;
    
    return 0;
}

5. Structures conditionnelles
Similaires au C, avec l'ajout du type bool.

üîπ If-else
int age = 19;

if (age < 18) {
    cout << "Vous √™tes mineur." << endl;
} else if (age == 18) {
    cout << "Vous venez tout juste d'√™tre majeur." << endl;
} else {
    cout << "Vous √™tes majeur." << endl;
}

üîπ Switch
int jour = 3;

switch (jour) {
    case 1:
        cout << "Lundi" << endl;
        break;
    case 2:
        cout << "Mardi" << endl;
        break;
    case 3:
        cout << "Mercredi" << endl;
        break;
    // ... autres jours
    default:
        cout << "Jour invalide" << endl;
}

üîπ Op√©rateur ternaire
int age = 20;
string statut = (age >= 18) ? "majeur" : "mineur";
cout << "Vous √™tes " << statut << "." << endl;

6. Boucles
Similaires au C, avec quelques am√©liorations.

üîπ Boucle for
for (int i = 0; i < 5; i++) {
    cout << "It√©ration " << i << endl;
}

üîπ Boucle for avec plage (C++11)
int tableau[] = {10, 20, 30, 40, 50};

for (int valeur : tableau) {
    cout << valeur << " ";
}
cout << endl;

// Pour les cha√Ænes de caract√®res
string nom = "Yassmine";
for (char lettre : nom) {
    cout << lettre << " ";
}
cout << endl;

üîπ Boucle while
int compteur = 0;
while (compteur < 5) {
    cout << "Compteur : " << compteur << endl;
    compteur++;
}

üîπ Boucle do-while
int nombre = 1;
do {
    cout << "Nombre : " << nombre << endl;
    nombre++;
} while (nombre <= 5);

7. Cha√Ænes de caract√®res
C++ offre deux fa√ßons de manipuler les cha√Ænes : style C et classe string.

üîπ Style C (tableau de caract√®res)
char nom[50] = "Yassmine";
cout << "Bonjour, " << nom << " !" << endl;

üîπ Classe string (plus moderne et puissante)
#include <string>
using namespace std;

string prenom = "Yassmine";
string nom = "Dalil";

// Concat√©nation
string nom_complet = prenom + " " + nom;
cout << "Nom complet : " << nom_complet << endl;

// M√©thodes utiles
cout << "Longueur : " << nom_complet.length() << endl;
cout << "Premi√®re lettre : " << nom_complet[0] << endl;
cout << "Sous-cha√Æne : " << nom_complet.substr(0, 8) << endl;

if (prenom == "Yassmine") {
    cout << "Bonjour Yassmine !" << endl;
}

8. Fonctions
Les fonctions en C++ peuvent avoir des valeurs par d√©faut et la surcharge.

üîπ D√©finition et appel
// D√©claration (prototype)
int additionner(int a, int b);

int main() {
    int resultat = additionner(5, 3);
    cout << "5 + 3 = " << resultat << endl;
    return 0;
}

// D√©finition
int additionner(int a, int b) {
    return a + b;
}

üîπ Param√®tres par d√©faut
void afficher_message(string message = "Bonjour", int fois = 1) {
    for (int i = 0; i < fois; i++) {
        cout << message << endl;
    }
}

int main() {
    afficher_message();  // Affiche "Bonjour" une fois
    afficher_message("Salut");  // Affiche "Salut" une fois
    afficher_message("Coucou", 3);  // Affiche "Coucou" trois fois
    return 0;
}

üîπ Surcharge de fonctions
// Plusieurs fonctions avec le m√™me nom mais des param√®tres diff√©rents
int additionner(int a, int b) {
    return a + b;
}

double additionner(double a, double b) {
    return a + b;
}

string additionner(string a, string b) {
    return a + b;
}

int main() {
    cout << additionner(5, 3) << endl;  // Utilise la version int
    cout << additionner(2.5, 3.7) << endl;  // Utilise la version double
    cout << additionner("Hello ", "World") << endl;  // Utilise la version string
    return 0;
}

9. Classes et Objets
La programmation orient√©e objet est une fonctionnalit√© cl√© du C++.

üîπ D√©finition de classe
class Personne {
private:
    // Attributs (membres de donn√©es)
    string nom;
    int age;
    
public:
    // Constructeur
    Personne(string n, int a) {
        nom = n;
        age = a;
    }
    
    // M√©thodes
    void se_presenter() {
        cout << "Bonjour, je m'appelle " << nom << " et j'ai " << age << " ans." << endl;
    }
    
    // Accesseurs (getters)
    string get_nom() const {
        return nom;
    }
    
    int get_age() const {
        return age;
    }
    
    // Mutateurs (setters)
    void set_age(int nouvel_age) {
        if (nouvel_age > 0) {
            age = nouvel_age;
        }
    }
};

üîπ Utilisation de la classe
int main() {
    // Cr√©ation d'objets
    Personne p1("Yassmine", 19);
    p1.se_presenter();
    
    // Utilisation des accesseurs et mutateurs
    cout << "Nom : " << p1.get_nom() << endl;
    
    p1.set_age(20);
    cout << "Nouvel √¢ge : " << p1.get_age() << endl;
    
    return 0;
}

10. Constructeurs et Destructeur
Les constructeurs initialisent les objets, le destructeur nettoie les ressources.

üîπ Constructeurs multiples
class Rectangle {
private:
    double longueur;
    double largeur;
    
public:
    // Constructeur par d√©faut
    Rectangle() {
        longueur = 0.0;
        largeur = 0.0;
    }
    
    // Constructeur avec param√®tres
    Rectangle(double l, double L) {
        longueur = l;
        largeur = L;
    }
    
    // Constructeur avec un seul param√®tre (cr√©e un carr√©)
    Rectangle(double cote) {
        longueur = cote;
        largeur = cote;
    }
    
    // Liste d'initialisation (meilleure pratique)
    Rectangle(double l, double L, string n) : longueur(l), largeur(L), nom(n) {
        // Corps du constructeur (peut √™tre vide)
    }
    
    // Destructeur
    ~Rectangle() {
        cout << "Destruction du rectangle" << endl;
        // Lib√©ration de ressources si n√©cessaire
    }
    
    // M√©thode pour calculer l'aire
    double aire() const {
        return longueur * largeur;
    }
    
    string nom;
};

11. H√©ritage
L'h√©ritage permet de cr√©er des hi√©rarchies de classes.

üîπ Classe de base et classe d√©riv√©e
// Classe de base
class Animal {
protected:
    string nom;
    
public:
    Animal(string n) : nom(n) {}
    
    void manger() {
        cout << nom << " est en train de manger." << endl;
    }
    
    virtual void faire_bruit() {
        cout << nom << " fait un bruit." << endl;
    }
};

// Classe d√©riv√©e
class Chien : public Animal {
private:
    string race;
    
public:
    Chien(string n, string r) : Animal(n), race(r) {}
    
    void aboyer() {
        cout << nom << " aboie !" << endl;
    }
    
    // Surcharge (override) de la m√©thode de la classe de base
    void faire_bruit() override {
        cout << nom << " dit Wouf Wouf !" << endl;
    }
    
    string get_race() const {
        return race;
    }
};

üîπ Utilisation de l'h√©ritage
int main() {
    Animal animal("Animal G√©n√©rique");
    animal.faire_bruit();  // Affiche "Animal G√©n√©rique fait un bruit."
    
    Chien rex("Rex", "Berger Allemand");
    rex.manger();  // M√©thode h√©rit√©e
    rex.aboyer();  // M√©thode sp√©cifique
    rex.faire_bruit();  // M√©thode surcharg√©e
    
    cout << "Race de Rex : " << rex.get_race() << endl;
    
    // Polymorphisme
    Animal* a = &rex;
    a->faire_bruit();  // Appelle la version surcharg√©e
    
    return 0;
}

12. Polymorphisme
Le polymorphisme permet √† des objets de diff√©rentes classes d'√™tre trait√©s comme des objets d'une classe commune.

üîπ Utilisation de fonctions virtuelles
class Forme {
public:
    virtual double aire() const {
        return 0.0;
    }
    
    virtual void afficher() const {
        cout << "Forme g√©n√©rique" << endl;
    }
    
    // Destructeur virtuel (important pour l'h√©ritage)
    virtual ~Forme() {}
};

class Cercle : public Forme {
private:
    double rayon;
    
public:
    Cercle(double r) : rayon(r) {}
    
    double aire() const override {
        return 3.14159 * rayon * rayon;
    }
    
    void afficher() const override {
        cout << "Cercle de rayon " << rayon << endl;
    }
};

class Rectangle : public Forme {
private:
    double longueur;
    double largeur;
    
public:
    Rectangle(double l, double L) : longueur(l), largeur(L) {}
    
    double aire() const override {
        return longueur * largeur;
    }
    
    void afficher() const override {
        cout << "Rectangle de dimensions " << longueur << "x" << largeur << endl;
    }
};

üîπ Utilisation du polymorphisme
int main() {
    Forme* formes[3];
    formes[0] = new Cercle(2.5);
    formes[1] = new Rectangle(3.0, 4.0);
    formes[2] = new Cercle(1.0);
    
    double aire_totale = 0.0;
    
    for (int i = 0; i < 3; i++) {
        formes[i]->afficher();
        aire_totale += formes[i]->aire();
        
        // Lib√©ration de la m√©moire
        delete formes[i];
    }
    
    cout << "Aire totale : " << aire_totale << endl;
    
    return 0;
}

13. Templates
Les templates permettent d'√©crire du code g√©n√©rique qui fonctionne avec diff√©rents types de donn√©es.

üîπ Fonction template
template <typename T>
T maximum(T a, T b) {
    return (a > b) ? a : b;
}

int main() {
    cout << "Max (5, 10) : " << maximum(5, 10) << endl;
    cout << "Max (3.14, 2.71) : " << maximum(3.14, 2.71) << endl;
    cout << "Max (abc, xyz) : " << maximum(string("abc"), string("xyz")) << endl;
    
    return 0;
}

üîπ Classe template
template <typename T>
class Pile {
private:
    T elements[100];
    int taille;
    
public:
    Pile() : taille(0) {}
    
    void empiler(T element) {
        if (taille < 100) {
            elements[taille++] = element;
        }
    }
    
    T depiler() {
        if (taille > 0) {
            return elements[--taille];
        }
        throw runtime_error("Pile vide");
    }
    
    bool est_vide() const {
        return taille == 0;
    }
};

int main() {
    // Pile d'entiers
    Pile<int> pile_entiers;
    pile_entiers.empiler(10);
    pile_entiers.empiler(20);
    cout << pile_entiers.depiler() << endl;  // Affiche 20
    
    // Pile de cha√Ænes
    Pile<string> pile_chaines;
    pile_chaines.empiler("Bonjour");
    pile_chaines.empiler("Monde");
    cout << pile_chaines.depiler() << endl;  // Affiche "Monde"
    
    return 0;
}

14. STL (Standard Template Library)
La STL fournit des conteneurs, it√©rateurs et algorithmes pr√™ts √† l'emploi.

üîπ Conteneurs
#include <vector>
#include <list>
#include <map>
#include <algorithm>
using namespace std;

int main() {
    // Vector (tableau dynamique)
    vector<int> nombres = {10, 20, 30, 40, 50};
    nombres.push_back(60);  // Ajoute √† la fin
    
    cout << "Taille du vecteur : " << nombres.size() << endl;
    cout << "Premier √©l√©ment : " << nombres.front() << endl;
    cout << "Dernier √©l√©ment : " << nombres.back() << endl;
    
    // Parcours avec it√©rateur
    for (vector<int>::iterator it = nombres.begin(); it != nombres.end(); ++it) {
        cout << *it << " ";
    }
    cout << endl;
    
    // Parcours simplifi√© (C++11)
    for (int n : nombres) {
        cout << n << " ";
    }
    cout << endl;
    
    // Liste cha√Æn√©e
    list<string> noms = {"Yassmine", "Ahmed", "Sara"};
    noms.push_front("Karim");  // Ajoute au d√©but
    
    // Map (dictionnaire)
    map<string, int> ages;
    ages["Yassmine"] = 19;
    ages["Ahmed"] = 22;
    
    cout << "Age de Yassmine : " << ages["Yassmine"] << endl;
    
    // Parcours d'une map
    for (const auto& paire : ages) {
        cout << paire.first << " : " << paire.second << " ans" << endl;
    }
    
    return 0;
}

üîπ Algorithmes
#include <vector>
#include <algorithm>
#include <iostream>
using namespace std;

int main() {
    vector<int> nombres = {5, 2, 8, 1, 9, 3};
    
    // Tri
    sort(nombres.begin(), nombres.end());
    
    // Affichage avec for_each et lambda (C++11)
    cout << "Nombres tri√©s : ";
    for_each(nombres.begin(), nombres.end(), [](int n) {
        cout << n << " ";
    });
    cout << endl;
    
    // Recherche
    auto it = find(nombres.begin(), nombres.end(), 8);
    if (it != nombres.end()) {
        cout << "Trouv√© " << *it << " √† la position " << distance(nombres.begin(), it) << endl;
    }
    
    // Min/Max
    auto [min_it, max_it] = minmax_element(nombres.begin(), nombres.end());
    cout << "Min : " << *min_it << ", Max : " << *max_it << endl;
    
    return 0;
}`,
  
  'PHP': `1. Introduction √† PHP
PHP (Hypertext Preprocessor) est un langage de programmation c√¥t√© serveur utilis√© principalement pour le d√©veloppement web. Il permet de g√©n√©rer des pages dynamiques, se connecter √† une base de donn√©es, et g√©rer les formulaires.

üí° Points forts de PHP :
‚úîÔ∏è Facile √† apprendre et √† utiliser.
‚úîÔ∏è Int√©gr√© avec HTML.
‚úîÔ∏è Compatible avec MySQL, PostgreSQL, SQLite, etc.
‚úîÔ∏è Fonctionne sur tous les serveurs web (Apache, Nginx‚Ä¶).

2. D√©claration des Variables en PHP
En PHP, les variables commencent toujours par $, et il n'est pas n√©cessaire de pr√©ciser le type de la variable (PHP est un langage faiblement typ√©).

üîπ Syntaxe des Variables
<?php
$nom = "Yassmine";  // Cha√Æne de caract√®res
$age = 19;          // Entier
$prix = 15.99;      // Float
$estConnecte = true; // Bool√©en

echo "Nom : $nom, Age : $age, Prix : $prix";
?>

üí° Explication :

$nom = "Yassmine"; ‚Üí Variable contenant une cha√Æne de caract√®res.

$age = 19; ‚Üí Variable de type entier.

$prix = 15.99; ‚Üí Variable de type d√©cimal.

$estConnecte = true; ‚Üí Bool√©en (true ou false).

üëâ PHP d√©duit automatiquement le type des variables en fonction de la valeur qu'on leur attribue.

3. Conditions en PHP (if, else if, else)
PHP utilise les m√™mes conditions que la plupart des langages de programmation (if, else if, else).

üîπ Condition if simple
<?php
$age = 20;

if ($age >= 18) {
    echo "Vous √™tes majeur.";
}
?>

üí° Explication :
Si $age est sup√©rieur ou √©gal √† 18, on affiche "Vous √™tes majeur.".

üîπ Condition if...else
<?php
$age = 16;

if ($age >= 18) {
    echo "Vous √™tes majeur.";
} else {
    echo "Vous √™tes mineur.";
}
?>

üí° Explication :
Si $age est inf√©rieur √† 18, alors on affiche "Vous √™tes mineur.".

üîπ Condition if...else if...else
<?php
$note = 15;

if ($note >= 18) {
    echo "Excellent !";
} elseif ($note >= 14) {
    echo "Bien !";
} elseif ($note >= 10) {
    echo "Passable.";
} else {
    echo "√âchec.";
}
?>

üí° Explication :

Si note >= 18, on affiche "Excellent !".

Si note >= 14, on affiche "Bien !".

Si note >= 10, on affiche "Passable.".

Sinon, on affiche "√âchec.".

4. Fonctions en PHP
Une fonction est un bloc de code qui ex√©cute une t√¢che sp√©cifique.

üîπ D√©claration d'une fonction sans param√®tre
<?php
function direBonjour() {
    echo "Bonjour, bienvenue sur notre site !";
}

direBonjour();
?>

üí° Explication :

function direBonjour() ‚Üí D√©claration d'une fonction nomm√©e direBonjour.

echo "Bonjour..."; ‚Üí Affichage d'un message.

direBonjour(); ‚Üí Appel de la fonction.

üîπ Fonction avec param√®tres
<?php
function saluer($nom) {
    echo "Bonjour, $nom !";
}

saluer("Yassmine");
?>

üí° Explication :

$nom est un param√®tre pass√© √† la fonction saluer.

Lorsqu'on appelle saluer("Yassmine");, le message "Bonjour, Yassmine !" s'affiche.

üîπ Fonction avec retour de valeur
<?php
function additionner($a, $b) {
    return $a + $b;
}

$resultat = additionner(5, 7);
echo "R√©sultat : $resultat";
?>

üí° Explication :

La fonction additionner($a, $b) retourne la somme de $a et $b.

Le r√©sultat est stock√© dans la variable $resultat et affich√©.

5. Tableaux en PHP
PHP propose plusieurs types de tableaux pour stocker des collections de valeurs.

üîπ Tableau index√©
<?php
// D√©claration et initialisation
$fruits = array("Pomme", "Banane", "Orange");
// Syntaxe alternative (PHP 5.4+)
$legumes = ["Carotte", "Tomate", "Poivron"];

// Acc√®s aux √©l√©ments par index
echo $fruits[0];  // Affiche "Pomme"
echo $legumes[1];  // Affiche "Tomate"

// Ajouter un √©l√©ment
$fruits[] = "Fraise";

// Parcourir un tableau
foreach ($fruits as $fruit) {
    echo "$fruit, ";
}
?>

üîπ Tableau associatif (cl√©-valeur)
<?php
// D√©claration et initialisation
$personne = array(
    "nom" => "Dalil",
    "age" => 19,
    "ville" => "Casablanca"
);
// Syntaxe alternative
$etudiant = [
    "prenom" => "Yassmine",
    "formation" => "Informatique",
    "annee" => 2
];

// Acc√®s aux √©l√©ments par cl√©
echo $personne["nom"];  // Affiche "Dalil"
echo $etudiant["formation"];  // Affiche "Informatique"

// Parcourir un tableau associatif
foreach ($personne as $cle => $valeur) {
    echo "$cle : $valeur, ";
}
?>

üîπ Tableau multidimensionnel
<?php
$etudiants = [
    ["Yassmine", "Informatique", 19],
    ["Ahmed", "Math√©matiques", 20],
    ["Sara", "Physique", 21]
];

echo $etudiants[0][0];  // Affiche "Yassmine"
echo $etudiants[1][1];  // Affiche "Math√©matiques"

// Tableau associatif multidimensionnel
$classes = [
    "info" => ["Yassmine", "Karim", "Leila"],
    "math" => ["Ahmed", "Meryem", "Omar"]
];

echo $classes["info"][0];  // Affiche "Yassmine"
?>

6. Boucles en PHP
PHP offre plusieurs types de boucles pour r√©p√©ter des blocs de code.

üîπ Boucle for
<?php
for ($i = 0; $i < 5; $i++) {
    echo "It√©ration $i<br>";
}
?>

üîπ Boucle while
<?php
$compteur = 0;
while ($compteur < 5) {
    echo "Compteur : $compteur<br>";
    $compteur++;
}
?>

üîπ Boucle do-while
<?php
$nombre = 1;
do {
    echo "Nombre : $nombre<br>";
    $nombre++;
} while ($nombre <= 5);
?>

üîπ Boucle foreach
<?php
$fruits = ["Pomme", "Banane", "Orange", "Fraise"];

foreach ($fruits as $fruit) {
    echo "$fruit, ";
}

// Avec cl√© et valeur
$personne = [
    "nom" => "Dalil",
    "prenom" => "Yassmine",
    "age" => 19
];

foreach ($personne as $cle => $valeur) {
    echo "$cle : $valeur<br>";
}
?>

7. Cha√Ænes de caract√®res
PHP offre de nombreuses fonctions pour manipuler les cha√Ænes de caract√®res.

üîπ Concat√©nation
<?php
$prenom = "Yassmine";
$nom = "Dalil";

// Concat√©nation avec l'op√©rateur .
$nom_complet = $prenom . " " . $nom;
echo $nom_complet;  // Affiche "Yassmine Dalil"

// Alternative avec les variables dans les guillemets doubles
echo "Bonjour, $prenom $nom!";  // Affiche "Bonjour, Yassmine Dalil!"
echo 'Bonjour, $prenom $nom!';  // Affiche "Bonjour, $prenom $nom!" (guillemets simples)
?>

üîπ Fonctions utiles pour les cha√Ænes
<?php
$texte = "Bienvenue sur notre site web";

// Longueur d'une cha√Æne
echo strlen($texte);  // Affiche 28

// Mettre en majuscules/minuscules
echo strtoupper($texte);  // BIENVENUE SUR NOTRE SITE WEB
echo strtolower($texte);  // bienvenue sur notre site web

// Remplacer du texte
echo str_replace("site", "portail", $texte);  // Bienvenue sur notre portail web

// Extraire une sous-cha√Æne
echo substr($texte, 0, 9);  // Bienvenue

// Position d'un mot dans une cha√Æne
echo strpos($texte, "site");  // 17
?>

8. Inclusion de fichiers
PHP permet d'inclure d'autres fichiers pour organiser le code.

üîπ Inclure des fichiers
// fichier: fonctions.php
<?php
function saluer($nom) {
    return "Bonjour, $nom !";
}
?>

// fichier: index.php
<?php
include 'fonctions.php';  // ou require 'fonctions.php';
echo saluer("Yassmine");  // Affiche "Bonjour, Yassmine !"
?>

üí° Diff√©rences entre include et require :
- include : g√©n√®re un warning si le fichier n'existe pas et continue l'ex√©cution
- require : g√©n√®re une erreur fatale si le fichier n'existe pas et arr√™te l'ex√©cution
- include_once et require_once : s'assurent que le fichier n'est inclus qu'une seule fois

9. Formulaires et traitement des donn√©es
PHP est souvent utilis√© pour traiter les donn√©es de formulaires HTML.

üîπ Formulaire HTML et traitement PHP
<!-- formulaire.html -->
<form action="traitement.php" method="post">
    <label for="nom">Nom :</label>
    <input type="text" id="nom" name="nom">
    
    <label for="email">Email :</label>
    <input type="email" id="email" name="email">
    
    <button type="submit">Envoyer</button>
</form>

<!-- traitement.php -->
<?php
// V√©rifier si le formulaire a √©t√© soumis
if ($_SERVER["REQUEST_METHOD"] == "POST") {
    // R√©cup√©rer les donn√©es du formulaire
    $nom = $_POST["nom"];
    $email = $_POST["email"];
    
    // Validation simple
    if (empty($nom) || empty($email)) {
        echo "Veuillez remplir tous les champs.";
    } else {
        // Traitement des donn√©es
        echo "Merci, $nom. Votre email ($email) a √©t√© enregistr√©.";
    }
}
?>

üîπ Variables superglobales
PHP offre plusieurs variables superglobales pour acc√©der aux donn√©es :
- $_POST : donn√©es envoy√©es par la m√©thode POST
- $_GET : donn√©es envoy√©es par la m√©thode GET (via l'URL)
- $_REQUEST : combine $_POST, $_GET et $_COOKIE
- $_SERVER : informations sur le serveur et l'environnement
- $_SESSION : variables de session (persistantes entre les pages)
- $_COOKIE : cookies HTTP

10. Connexion √† une base de donn√©es
PHP est souvent utilis√© avec des bases de donn√©es pour cr√©er des applications dynamiques.

üîπ Connexion et requ√™tes avec PDO (PHP Data Objects)
<?php
try {
    // Connexion √† la base de donn√©es
    $pdo = new PDO('mysql:host=localhost;dbname=mon_site', 'utilisateur', 'mot_de_passe');
    $pdo->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);
    
    // Requ√™te SELECT
    $requete = $pdo->query('SELECT * FROM utilisateurs');
    
    // Afficher les r√©sultats
    while ($utilisateur = $requete->fetch(PDO::FETCH_ASSOC)) {
        echo "Nom : " . $utilisateur['nom'] . ", Email : " . $utilisateur['email'] . "<br>";
    }
    
    // Requ√™te pr√©par√©e (s√©curis√©e contre les injections SQL)
    $stmt = $pdo->prepare('INSERT INTO utilisateurs (nom, email) VALUES (?, ?)');
    $stmt->execute(['Yassmine', 'yassmine@example.com']);
    
    echo "Nouvel utilisateur ajout√© avec l'ID : " . $pdo->lastInsertId();
    
} catch (PDOException $e) {
    echo "Erreur : " . $e->getMessage();
}
?>

11. Sessions et cookies
PHP permet de stocker des donn√©es entre les pages avec les sessions et cookies.

üîπ Sessions
<?php
// D√©marrer ou reprendre une session
session_start();

// Stocker des donn√©es de session
$_SESSION['utilisateur'] = "Yassmine";
$_SESSION['est_connecte'] = true;

// Acc√©der aux donn√©es de session (sur une autre page)
echo "Bonjour, " . $_SESSION['utilisateur'];

// Supprimer une variable de session
unset($_SESSION['est_connecte']);

// D√©truire compl√®tement la session
session_destroy();
?>

üîπ Cookies
<?php
// D√©finir un cookie (nom, valeur, expiration en secondes depuis maintenant)
setcookie("utilisateur", "Yassmine", time() + 3600);  // expire dans 1 heure

// Acc√©der √† un cookie
if (isset($_COOKIE["utilisateur"])) {
    echo "Bienvenue, " . $_COOKIE["utilisateur"];
}

// Supprimer un cookie (en d√©finissant une date d'expiration dans le pass√©)
setcookie("utilisateur", "", time() - 3600);
?>

12. PHP et HTML : Exemple Complet
PHP est souvent int√©gr√© dans des pages HTML pour cr√©er des sites dynamiques.

```php
<!DOCTYPE html>
<html>
<head>
    <title>Mon Site Dynamique</title>
    <meta charset="UTF-8">
</head>
<body>
    <header>
        <h1>Bienvenue sur Mon Site</h1>
        <nav>
            <ul>
                <li><a href="index.php">Accueil</a></li>
                <li><a href="apropos.php">√Ä propos</a></li>
                <li><a href="contact.php">Contact</a></li>
            </ul>
        </nav>
    </header>
    
    <main>
        <?php
        // Date et heure actuelles
        $date = date("d/m/Y H:i:s");
        echo "<p>Aujourd'hui, nous sommes le $date</p>";
        
        // Liste dynamique
        $articles = [
            ["titre" => "PHP pour les d√©butants", "auteur" => "Yassmine D."],
            ["titre" => "Bases de donn√©es MySQL", "auteur" => "Ahmed K."],
            ["titre" => "D√©veloppement web moderne", "auteur" => "Sara L."]
        ];
        
        echo "<h2>Nos derniers articles</h2>";
        echo "<ul>";
        foreach ($articles as $article) {
            echo "<li>" . $article["titre"] . " par " . $article["auteur"] . "</li>";
        }
        echo "</ul>";
        
        // Fonction conditionnelle
        function salutation() {
            $heure = date("H");
            if ($heure < 12) {
                return "Bonjour";
            } elseif ($heure < 18) {
                return "Bon apr√®s-midi";
            } else {
                return "Bonsoir";
            }
        }
        
        echo "<p>" . salutation() . " et bienvenue sur notre site !</p>";
        ?>
    </main>
    
    <footer>
        <p>&copy; <?php echo date("Y"); ?> - Mon Site Dynamique</p>
    </footer>
</body>
</html>
```

13. R√©sum√© des Diff√©rences avec d'autres Langages
Caract√©ristique	PHP	JavaScript	Python
Ex√©cution	C√¥t√© serveur	C√¥t√© client	Serveur/Bureau
D√©claration variable	$nom = "Ali";	let nom = "Ali";	nom = "Ali"
Affichage	echo "Texte";	console.log("Texte");	print("Texte")
Conditions	if...else	if...else	if...else
Fonctions	function nom()	function nom()	def nom()`,
  
  'SQL': `1. Introduction √† SQL
SQL (Structured Query Language) est un langage standardis√© utilis√© pour communiquer avec les bases de donn√©es relationnelles. Il permet de cr√©er, lire, mettre √† jour et supprimer des donn√©es.

üîπ Caract√©ristiques principales :
- Langage d√©claratif (on d√©crit ce qu'on veut, pas comment l'obtenir)
- Standard utilis√© par presque tous les syst√®mes de gestion de bases de donn√©es (MySQL, PostgreSQL, SQLite, SQL Server, Oracle...)
- Compos√© de plusieurs sous-langages : DDL (Data Definition Language), DML (Data Manipulation Language), DCL (Data Control Language)

2. Cr√©ation et Modification de Tables (DDL)
Le langage de d√©finition des donn√©es (DDL) permet de cr√©er et modifier la structure des bases de donn√©es.

üîπ Cr√©ation d'une base de donn√©es
CREATE DATABASE ecole;

üîπ Utilisation d'une base de donn√©es
USE ecole;

üîπ Cr√©ation d'une table
CREATE TABLE etudiants (
    id INT PRIMARY KEY AUTO_INCREMENT,
    nom VARCHAR(50) NOT NULL,
    prenom VARCHAR(50) NOT NULL,
    date_naissance DATE,
    email VARCHAR(100) UNIQUE,
    filiere VARCHAR(50),
    moyenne FLOAT DEFAULT 0.0
);

CREATE TABLE cours (
    id INT PRIMARY KEY AUTO_INCREMENT,
    titre VARCHAR(100) NOT NULL,
    description TEXT,
    credit INT,
    professeur_id INT
);

üîπ Modification d'une table
-- Ajouter une colonne
ALTER TABLE etudiants ADD COLUMN telephone VARCHAR(20);

-- Modifier une colonne
ALTER TABLE etudiants MODIFY COLUMN email VARCHAR(150);

-- Supprimer une colonne
ALTER TABLE etudiants DROP COLUMN telephone;

üîπ Suppression
-- Supprimer une table
DROP TABLE cours;

-- Supprimer une base de donn√©es
DROP DATABASE ecole;

3. Manipulation des Donn√©es (DML)
Le langage de manipulation des donn√©es (DML) permet d'ins√©rer, mettre √† jour, supprimer et r√©cup√©rer des donn√©es.

üîπ Insertion de donn√©es
-- Insertion simple
INSERT INTO etudiants (nom, prenom, date_naissance, email, filiere)
VALUES ('Dalil', 'Yassmine', '2005-05-15', 'yassmine@example.com', 'Informatique');

-- Insertion multiple
INSERT INTO etudiants (nom, prenom, filiere)
VALUES 
    ('Karimi', 'Ahmed', 'Math√©matiques'),
    ('Alaoui', 'Sara', 'Physique'),
    ('Hassan', 'Karim', 'Informatique');

üîπ Mise √† jour de donn√©es
-- Mise √† jour simple
UPDATE etudiants
SET email = 'ahmed.karimi@example.com'
WHERE nom = 'Karimi' AND prenom = 'Ahmed';

-- Mise √† jour multiple
UPDATE etudiants
SET moyenne = 15.5
WHERE filiere = 'Informatique';

üîπ Suppression de donn√©es
-- Suppression avec condition
DELETE FROM etudiants
WHERE nom = 'Hassan';

-- Suppression de toutes les donn√©es
DELETE FROM etudiants;
-- ou
TRUNCATE TABLE etudiants;

4. Requ√™tes de S√©lection (SELECT)
Les requ√™tes SELECT sont utilis√©es pour r√©cup√©rer des donn√©es d'une ou plusieurs tables.

üîπ S√©lection de base
-- S√©lectionner toutes les colonnes
SELECT * FROM etudiants;

-- S√©lectionner des colonnes sp√©cifiques
SELECT nom, prenom, filiere FROM etudiants;

üîπ Filtrage avec WHERE
-- √âgalit√©
SELECT * FROM etudiants WHERE filiere = 'Informatique';

-- Comparaison
SELECT * FROM etudiants WHERE moyenne > 12;

-- Intervalle
SELECT * FROM etudiants WHERE moyenne BETWEEN 10 AND 15;

-- Liste de valeurs
SELECT * FROM etudiants WHERE filiere IN ('Informatique', 'Math√©matiques');

-- Pattern matching
SELECT * FROM etudiants WHERE nom LIKE 'A%';  -- Noms commen√ßant par A
SELECT * FROM etudiants WHERE email LIKE '%@gmail.com';  -- Emails Gmail

-- NULL
SELECT * FROM etudiants WHERE date_naissance IS NULL;

üîπ Tri avec ORDER BY
-- Tri croissant (ascendant)
SELECT * FROM etudiants ORDER BY nom ASC;

-- Tri d√©croissant (descendant)
SELECT * FROM etudiants ORDER BY moyenne DESC;

-- Tri multiple
SELECT * FROM etudiants ORDER BY filiere ASC, moyenne DESC;

üîπ Limitation avec LIMIT
-- Limiter le nombre de r√©sultats
SELECT * FROM etudiants LIMIT 10;

-- Pagination (skip 10, take 5)
SELECT * FROM etudiants LIMIT 5 OFFSET 10;

5. Fonctions d'Agr√©gation
Les fonctions d'agr√©gation effectuent des calculs sur des ensembles de valeurs.

üîπ Fonctions courantes
-- Compter
SELECT COUNT(*) FROM etudiants;
SELECT COUNT(DISTINCT filiere) FROM etudiants;

-- Somme
SELECT SUM(moyenne) FROM etudiants;

-- Moyenne
SELECT AVG(moyenne) FROM etudiants WHERE filiere = 'Informatique';

-- Minimum et Maximum
SELECT MIN(moyenne) AS min_moyenne, MAX(moyenne) AS max_moyenne FROM etudiants;

üîπ Regroupement avec GROUP BY
-- Compter le nombre d'√©tudiants par fili√®re
SELECT filiere, COUNT(*) AS nombre_etudiants
FROM etudiants
GROUP BY filiere;

-- Moyenne par fili√®re
SELECT filiere, AVG(moyenne) AS moyenne_generale
FROM etudiants
GROUP BY filiere;

üîπ Filtrage de groupes avec HAVING
-- Fili√®res ayant plus de 5 √©tudiants
SELECT filiere, COUNT(*) AS nombre_etudiants
FROM etudiants
GROUP BY filiere
HAVING COUNT(*) > 5;

-- Fili√®res avec une moyenne g√©n√©rale > 12
SELECT filiere, AVG(moyenne) AS moyenne_generale
FROM etudiants
GROUP BY filiere
HAVING AVG(moyenne) > 12;

6. Jointures entre Tables
Les jointures permettent de combiner des donn√©es provenant de plusieurs tables.

üîπ Structure des tables
CREATE TABLE professeurs (
    id INT PRIMARY KEY AUTO_INCREMENT,
    nom VARCHAR(50) NOT NULL,
    prenom VARCHAR(50) NOT NULL,
    specialite VARCHAR(50)
);

ALTER TABLE cours
ADD CONSTRAINT fk_professeur
FOREIGN KEY (professeur_id) REFERENCES professeurs(id);

CREATE TABLE inscriptions (
    etudiant_id INT,
    cours_id INT,
    date_inscription DATE,
    note FLOAT,
    PRIMARY KEY (etudiant_id, cours_id),
    FOREIGN KEY (etudiant_id) REFERENCES etudiants(id),
    FOREIGN KEY (cours_id) REFERENCES cours(id)
);

üîπ INNER JOIN
-- Joindre √©tudiants et inscriptions
SELECT e.nom, e.prenom, c.titre, i.note
FROM etudiants e
INNER JOIN inscriptions i ON e.id = i.etudiant_id
INNER JOIN cours c ON i.cours_id = c.id;

üîπ LEFT JOIN
-- Tous les √©tudiants, m√™me ceux sans inscription
SELECT e.nom, e.prenom, c.titre
FROM etudiants e
LEFT JOIN inscriptions i ON e.id = i.etudiant_id
LEFT JOIN cours c ON i.cours_id = c.id;

üîπ RIGHT JOIN
-- Tous les cours, m√™me ceux sans √©tudiant
SELECT c.titre, e.nom, e.prenom
FROM inscriptions i
RIGHT JOIN cours c ON i.cours_id = c.id
LEFT JOIN etudiants e ON i.etudiant_id = e.id;

üîπ FULL JOIN (pas disponible dans MySQL, simulation)
-- Tous les √©tudiants et tous les cours
SELECT e.nom, e.prenom, c.titre
FROM etudiants e
LEFT JOIN inscriptions i ON e.id = i.etudiant_id
LEFT JOIN cours c ON i.cours_id = c.id
UNION
SELECT e.nom, e.prenom, c.titre
FROM etudiants e
RIGHT JOIN inscriptions i ON e.id = i.etudiant_id
RIGHT JOIN cours c ON i.cours_id = c.id;

7. Sous-requ√™tes
Les sous-requ√™tes sont des requ√™tes imbriqu√©es dans d'autres requ√™tes.

üîπ Sous-requ√™te dans WHERE
-- √âtudiants inscrits √† un cours sp√©cifique
SELECT nom, prenom
FROM etudiants
WHERE id IN (
    SELECT etudiant_id
    FROM inscriptions
    WHERE cours_id = 3
);

-- √âtudiants avec une moyenne sup√©rieure √† la moyenne g√©n√©rale
SELECT nom, prenom, moyenne
FROM etudiants
WHERE moyenne > (
    SELECT AVG(moyenne)
    FROM etudiants
);

üîπ Sous-requ√™te dans FROM
-- Calcul interm√©diaire
SELECT filiere, AVG(note_moyenne) AS moyenne_filiere
FROM (
    SELECT e.filiere, e.id, AVG(i.note) AS note_moyenne
    FROM etudiants e
    JOIN inscriptions i ON e.id = i.etudiant_id
    GROUP BY e.id, e.filiere
) AS moyennes_etudiants
GROUP BY filiere;

üîπ Sous-requ√™te dans SELECT
-- Afficher la moyenne de classe avec chaque √©tudiant
SELECT 
    nom, 
    prenom, 
    moyenne, 
    (SELECT AVG(moyenne) FROM etudiants) AS moyenne_classe
FROM etudiants;

8. Op√©rations sur les Ensembles
SQL permet d'effectuer des op√©rations entre ensembles de r√©sultats.

üîπ UNION (combinaison sans doublons)
-- Combiner les noms des √©tudiants et des professeurs
SELECT nom, prenom, '√âtudiant' AS role FROM etudiants
UNION
SELECT nom, prenom, 'Professeur' AS role FROM professeurs
ORDER BY nom, prenom;

üîπ UNION ALL (combinaison avec doublons)
-- Similaire √† UNION mais garde les doublons
SELECT filiere FROM etudiants
UNION ALL
SELECT specialite FROM professeurs;

üîπ INTERSECT (√©l√©ments communs)
-- Noms pr√©sents √† la fois chez les √©tudiants et les professeurs
-- (simul√© car non support√© directement par MySQL)
SELECT nom FROM etudiants
WHERE nom IN (SELECT nom FROM professeurs);

üîπ EXCEPT (diff√©rence d'ensembles)
-- Noms d'√©tudiants qui ne sont pas des noms de professeurs
-- (simul√© car non support√© directement par MySQL)
SELECT nom FROM etudiants
WHERE nom NOT IN (SELECT nom FROM professeurs);

9. Transactions
Les transactions permettent de grouper plusieurs op√©rations en une seule unit√© de travail.

üîπ Structure d'une transaction
-- D√©marrer une transaction
START TRANSACTION;

-- Op√©rations
INSERT INTO etudiants (nom, prenom, filiere) VALUES ('Nouvel', 'Etudiant', 'Biologie');
UPDATE cours SET credit = 5 WHERE id = 2;

-- Valider les modifications
COMMIT;

-- OU annuler les modifications
ROLLBACK;

üîπ Transaction avec point de sauvegarde
START TRANSACTION;

INSERT INTO etudiants (nom, prenom, filiere) VALUES ('Etudiant1', 'Test1', 'Chimie');
SAVEPOINT point1;

INSERT INTO etudiants (nom, prenom, filiere) VALUES ('Etudiant2', 'Test2', 'Physique');
SAVEPOINT point2;

-- Si probl√®me, on peut revenir √† un point de sauvegarde
ROLLBACK TO point1;

-- Puis continuer ou valider
COMMIT;

10. Vues
Les vues sont des requ√™tes enregistr√©es qui peuvent √™tre utilis√©es comme des tables virtuelles.

üîπ Cr√©ation de vue
-- Vue simple
CREATE VIEW etudiants_info AS
SELECT id, nom, prenom, filiere, moyenne
FROM etudiants
WHERE moyenne > 10;

-- Vue plus complexe
CREATE VIEW resultats_cours AS
SELECT 
    e.nom, 
    e.prenom, 
    c.titre AS cours, 
    i.note,
    p.nom AS professeur
FROM etudiants e
JOIN inscriptions i ON e.id = i.etudiant_id
JOIN cours c ON i.cours_id = c.id
JOIN professeurs p ON c.professeur_id = p.id;

üîπ Utilisation de vue
-- Interroger une vue comme une table normale
SELECT * FROM etudiants_info WHERE filiere = 'Informatique';

-- Jointure avec une vue
SELECT ri.nom, ri.prenom, ri.cours, ri.note
FROM resultats_cours ri
WHERE ri.note > 15;

üîπ Modification de vue
-- Modifier une vue existante
ALTER VIEW etudiants_info AS
SELECT id, nom, prenom, filiere, moyenne, email
FROM etudiants
WHERE moyenne > 8;

-- Supprimer une vue
DROP VIEW resultats_cours;

11. Index
Les index am√©liorent les performances des requ√™tes en permettant un acc√®s plus rapide aux donn√©es.

üîπ Cr√©ation d'index
-- Index simple
CREATE INDEX idx_filiere ON etudiants(filiere);

-- Index compos√© (sur plusieurs colonnes)
CREATE INDEX idx_nom_prenom ON etudiants(nom, prenom);

-- Index unique
CREATE UNIQUE INDEX idx_email ON etudiants(email);

üîπ Suppression d'index
DROP INDEX idx_filiere ON etudiants;

12. Contr√¥le d'Acc√®s (DCL)
Le langage de contr√¥le des donn√©es (DCL) g√®re les permissions sur les objets de la base.

üîπ Gestion des utilisateurs
-- Cr√©er un utilisateur
CREATE USER 'app_user'@'localhost' IDENTIFIED BY 'password123';

-- Supprimer un utilisateur
DROP USER 'app_user'@'localhost';

üîπ Attribution de privil√®ges
-- Donner des droits sp√©cifiques
GRANT SELECT, INSERT ON ecole.etudiants TO 'app_user'@'localhost';

-- Donner tous les droits sur une base
GRANT ALL PRIVILEGES ON ecole.* TO 'admin'@'localhost';

-- R√©voquer des droits
REVOKE INSERT ON ecole.etudiants FROM 'app_user'@'localhost';

-- Appliquer les changements
FLUSH PRIVILEGES;

13. Exemples Avanc√©s
Voici quelques exemples plus complexes pour illustrer la puissance de SQL.

üîπ Requ√™te hi√©rarchique (manager-employ√©)
-- Table auto-r√©f√©renc√©e
CREATE TABLE employes (
    id INT PRIMARY KEY,
    nom VARCHAR(50),
    manager_id INT,
    FOREIGN KEY (manager_id) REFERENCES employes(id)
);

-- Requ√™te r√©cursive avec CTE (Common Table Expression)
WITH RECURSIVE hierarchie AS (
    -- Cas de base : les managers de haut niveau (sans manager)
    SELECT id, nom, manager_id, 0 AS niveau
    FROM employes
    WHERE manager_id IS NULL
    
    UNION ALL
    
    -- Cas r√©cursif : employ√©s avec leur manager
    SELECT e.id, e.nom, e.manager_id, h.niveau + 1
    FROM employes e
    JOIN hierarchie h ON e.manager_id = h.id
)
SELECT id, nom, niveau, manager_id
FROM hierarchie
ORDER BY niveau, nom;

üîπ Fen√™trage (Window Functions)
-- Classement des √©tudiants par moyenne dans chaque fili√®re
SELECT 
    nom, 
    prenom, 
    filiere, 
    moyenne,
    RANK() OVER (PARTITION BY filiere ORDER BY moyenne DESC) AS rang_filiere,
    DENSE_RANK() OVER (ORDER BY moyenne DESC) AS rang_general
FROM etudiants;

-- Calcul de moyennes mobiles
SELECT 
    date, 
    valeur,
    AVG(valeur) OVER (ORDER BY date ROWS BETWEEN 2 PRECEDING AND CURRENT ROW) AS moyenne_mobile_3j
FROM mesures;

üîπ Pivot (transformer lignes en colonnes)
-- Compter les √©tudiants par fili√®re et par ann√©e
SELECT 
    YEAR(date_naissance) AS annee,
    SUM(CASE WHEN filiere = 'Informatique' THEN 1 ELSE 0 END) AS info,
    SUM(CASE WHEN filiere = 'Math√©matiques' THEN 1 ELSE 0 END) AS maths,
    SUM(CASE WHEN filiere = 'Physique' THEN 1 ELSE 0 END) AS physique,
    COUNT(*) AS total
FROM etudiants
GROUP BY YEAR(date_naissance)
ORDER BY annee;

14. Diff√©rences entre les SGBD
Bien que SQL soit standardis√©, il existe des variations entre les syst√®mes de gestion de bases de donn√©es.

üîπ Principales diff√©rences
Type	MySQL	PostgreSQL	SQLite	SQL Server
Auto-increment	AUTO_INCREMENT	SERIAL	AUTOINCREMENT	IDENTITY
Limit	LIMIT 10	LIMIT 10	LIMIT 10	TOP 10
Rounding	ROUND()	ROUND()	ROUND()	ROUND()
Date Function	NOW()	NOW()	datetime('now')	GETDATE()
GUID/UUID	UUID()	gen_random_uuid()	-	NEWID()
Concatenate	CONCAT(a, b)	a || b	a || b	a + b

15. Bonnes Pratiques
Quelques conseils pour √©crire du SQL efficace et maintenable.

üîπ Performance
- Utilisez des index pour les colonnes fr√©quemment interrog√©es
- √âvitez SELECT * et s√©lectionnez uniquement les colonnes n√©cessaires
- Limitez les r√©sultats avec LIMIT quand c'est possible
- Utilisez EXPLAIN pour analyser les performances des requ√™tes

üîπ S√©curit√©
- Utilisez des requ√™tes param√©tr√©es pour √©viter les injections SQL
- N'accordez que les privil√®ges minimaux n√©cessaires
- Validez toutes les entr√©es utilisateur

üîπ Lisibilit√©
- Utilisez une indentation coh√©rente
- √âcrivez les mots-cl√©s SQL en majuscules
- Donnez des noms explicites aux colonnes et tables
- Commentez les requ√™tes complexes`
};

const seedSummaries = async () => {
  console.log('Starting to seed all language summaries...');
  
  try {
    for (const language of programmingLanguages) {
      console.log(`Processing language: ${language.name}`);
      
      // Check if language exists
      const { data: existingLang, error: langError } = await supabase
        .from('programming_languages')
        .select('id')
        .eq('name', language.name)
        .maybeSingle();
      
      let languageId;
      
      if (langError && langError.code !== 'PGRST116') {
        console.error(`Error checking for language ${language.name}:`, langError);
        continue;
      }
      
      // If language doesn't exist, create it
      if (!existingLang) {
        console.log(`Creating language: ${language.name}`);
        const { data: newLang, error: createError } = await supabase
          .from('programming_languages')
          .insert({
            name: language.name,
            description: language.description,
            image_url: language.image_url,
            icon: language.icon || 'code',
            color: language.color || '#000000'
          })
          .select('id')
          .single();
          
        if (createError) {
          console.error(`Error creating language ${language.name}:`, createError);
          continue;
        }
        
        languageId = newLang.id;
        console.log(`Created language ${language.name} with ID: ${languageId}`);
      } else {
        languageId = existingLang.id;
        console.log(`Language ${language.name} already exists with ID: ${languageId}`);
      }
      
      // Check if summary exists
      const { data: existingSummary, error: summaryError } = await supabase
        .from('language_summaries')
        .select('id')
        .eq('language_id', languageId)
        .maybeSingle();
        
      if (summaryError && summaryError.code !== 'PGRST116') {
        console.error(`Error checking for summary of ${language.name}:`, summaryError);
        continue;
      }
      
      // If summary doesn't exist, create it
      if (!existingSummary) {
        console.log(`Creating summary for ${language.name}`);
        const { error: createSummaryError } = await supabase
          .from('language_summaries')
          .insert({
            language_id: languageId,
            title: `${language.name} Language Summary`,
            content: summaryContents[language.name] || `Summary for ${language.name} will be added soon.`
          });
          
        if (createSummaryError) {
          console.error(`Error creating summary for ${language.name}:`, createSummaryError);
          continue;
        }
        
        console.log(`Created summary for ${language.name}`);
        
        // Create a badge for the language
        const { error: badgeError } = await supabase
          .from('badges')
          .insert({
            name: `${language.name} Mastery`,
            description: `Completed ${language.name} summary and quiz`,
            icon: 'award',
            points: 100
          });
          
        if (badgeError && !badgeError.message?.includes('duplicate')) {
          console.error(`Error creating ${language.name} badge:`, badgeError);
        } else {
          console.log(`${language.name} badge created successfully`);
        }
      } else {
        console.log(`Summary for ${language.name} already exists`);
      }
    }
    
    console.log('All language summaries seeded successfully!');
  } catch (error) {
    console.error('Error seeding language summaries:', error);
  }
};

seedSummaries();
