
// Main script to seed the database with all needed data
import { supabase } from '../integrations/supabase/client';
import './seed-java-summary.js';

const runSeeder = async () => {
  console.log('Starting database seeding...');
  
  try {
    // Check if Java language exists, if not create it
    const { data: javaExists, error: checkError } = await supabase
      .from('programming_languages')
      .select('id')
      .eq('name', 'Java')
      .maybeSingle();
      
    if (checkError) {
      console.error('Error checking for Java language:', checkError);
    }
    
    if (!javaExists) {
      // Insert Java language
      const { error: insertError } = await supabase
        .from('programming_languages')
        .insert({
          name: 'Java',
          description: 'Java est un langage de programmation orient√© objet tr√®s utilis√© pour le d√©veloppement d\'applications d\'entreprise et Android.',
          icon: 'coffee',
          image_url: 'https://upload.wikimedia.org/wikipedia/en/thumb/3/30/Java_programming_language_logo.svg/1200px-Java_programming_language_logo.svg.png',
          color: '#f89820'
        });
        
      if (insertError) {
        console.error('Error inserting Java language:', insertError);
      } else {
        console.log('Java language inserted successfully');
      }
    } else {
      console.log('Java language already exists in the database');
    }
    
    // Check if JavaScript language exists, if not create it
    const { data: jsExists, error: jsCheckError } = await supabase
      .from('programming_languages')
      .select('id')
      .eq('name', 'JavaScript')
      .maybeSingle();
      
    if (jsCheckError) {
      console.error('Error checking for JavaScript language:', jsCheckError);
    }
    
    if (!jsExists) {
      // Insert JavaScript language
      const { error: jsInsertError } = await supabase
        .from('programming_languages')
        .insert({
          name: 'JavaScript',
          description: 'JavaScript est un langage de programmation de scripts principalement utilis√© dans les pages web interactives et c√¥t√© serveur.',
          icon: 'code',
          image_url: 'https://upload.wikimedia.org/wikipedia/commons/thumb/9/99/Unofficial_JavaScript_logo_2.svg/1200px-Unofficial_JavaScript_logo_2.svg.png',
          color: '#f7df1e'
        });
        
      if (jsInsertError) {
        console.error('Error inserting JavaScript language:', jsInsertError);
      } else {
        console.log('JavaScript language inserted successfully');
      }
      
      // After creating JavaScript language, insert its summary
      await insertJavaScriptSummary();
    } else {
      console.log('JavaScript language already exists in the database');
      
      // Check if JavaScript summary exists
      const { data: jsSummary, error: jsSummaryError } = await supabase
        .from('language_summaries')
        .select('id')
        .eq('language_id', jsExists.id)
        .maybeSingle();
        
      if (jsSummaryError) {
        console.error('Error checking for JavaScript summary:', jsSummaryError);
      }
      
      if (!jsSummary) {
        await insertJavaScriptSummary(jsExists.id);
      }
    }
    
    console.log('Database seeding completed');
  } catch (error) {
    console.error('Error during database seeding:', error);
  }
};

// Insert JavaScript summary
const insertJavaScriptSummary = async (languageId = null) => {
  try {
    // If no language ID provided, fetch it
    if (!languageId) {
      const { data, error } = await supabase
        .from('programming_languages')
        .select('id')
        .eq('name', 'JavaScript')
        .single();
        
      if (error) throw error;
      languageId = data.id;
    }
    
    // Insert JavaScript summary
    const { error: summaryError } = await supabase
      .from('language_summaries')
      .insert({
        language_id: languageId,
        title: 'JavaScript Language Summary',
        content: `1. D√©claration des variables en JavaScript
Qu'est-ce qu'une variable ?
Une variable est un espace en m√©moire o√π l'on stocke une donn√©e. Contrairement √† Java, JavaScript est un langage dynamique, ce qui signifie qu'on n'a pas besoin de pr√©ciser le type de donn√©es (comme en Python).

Les trois fa√ßons de d√©clarer une variable en JavaScript
Il existe trois mots-cl√©s pour d√©clarer une variable :

var (ancienne m√©thode, √† √©viter)

let (m√©thode recommand√©e)

const (pour les valeurs constantes)

Exemple :
var nom = "Yassmine"; // Ancienne mani√®re (peut poser des probl√®mes)
let age = 19;         // Nouvelle mani√®re, recommand√©e
const pays = "Maroc"; // Une valeur qui ne changera pas

Quelle est la diff√©rence entre var, let et const ?
Mot-cl√©	Modification possible ?	Port√©e (scope)
var	Oui	Fonction
let	Oui	Bloc {}
const	Non	Bloc {}

üí° Conseil :

Utilise let pour les variables qui peuvent changer.

Utilise const si la valeur ne doit jamais changer.

√âvite var, car il peut cr√©er des bugs.

2. Conditions en JavaScript
Une condition permet d'ex√©cuter un code seulement si une certaine situation est vraie.

Condition if simple
let age = 19;

if (age >= 18) {
    console.log("Vous √™tes majeur.");
}

üí° Explication :

Si age est sup√©rieur ou √©gal √† 18, alors on affiche "Vous √™tes majeur.".

Condition if...else
let age = 16;

if (age >= 18) {
    console.log("Vous √™tes majeur.");
} else {
    console.log("Vous √™tes mineur.");
}

üí° Explication :

Si age est inf√©rieur √† 18, alors on affiche "Vous √™tes mineur.".

Condition if...else if...else
Si on veut tester plusieurs cas, on utilise else if :

let note = 15;

if (note >= 18) {
    console.log("Excellent !");
} else if (note >= 14) {
    console.log("Bien !");
} else if (note >= 10) {
    console.log("Passable.");
} else {
    console.log("√âchec.");
}

üí° Explication :

Si note est sup√©rieure ou √©gale √† 18, on affiche "Excellent".

Sinon, si note >= 14, on affiche "Bien".

Sinon, si note >= 10, on affiche "Passable".

Sinon, on affiche "√âchec".

Conditions avec && et ||
Comme en Java :

&& (ET logique) ‚Üí Les deux conditions doivent √™tre vraies.

|| (OU logique) ‚Üí Au moins une condition doit √™tre vraie.

Exemple avec && (ET logique)
let argent = 50;
let age = 20;

if (age >= 18 && argent >= 100) {
    console.log("Vous pouvez entrer en bo√Æte.");
} else {
    console.log("Acc√®s refus√©.");
}

üí° Explication :
‚úîÔ∏è La personne doit avoir plus de 18 ans ET au moins 100‚Ç¨.

Exemple avec || (OU logique)
let carteMembre = false;
let argent = 150;

if (carteMembre || argent >= 100) {
    console.log("Acc√®s VIP accord√©.");
} else {
    console.log("Acc√®s refus√©.");
}

üí° Explication :
‚úîÔ∏è Si la personne a une carte membre OU si elle a au moins 100‚Ç¨, elle peut entrer.

3. Fonctions en JavaScript
Une fonction est un bloc de code qui effectue une action et peut √™tre r√©utilis√© plusieurs fois.

Cr√©er une fonction sans param√®tres
function direBonjour() {
    console.log("Bonjour, bienvenue !");
}

// Appel de la fonction
direBonjour();

üí° Explication :

function direBonjour() ‚Üí D√©finit une fonction nomm√©e direBonjour.

console.log("Bonjour, bienvenue !") ‚Üí Affiche "Bonjour, bienvenue !".

Fonctions avec param√®tres
function saluer(nom) {
    console.log("Bonjour, " + nom + " !");
}

// Appel de la fonction
saluer("Yassmine");
saluer("Ahmed");

üí° Explication :

La fonction saluer(nom) prend un param√®tre nom.

Elle affiche "Bonjour, Yassmine !", "Bonjour, Ahmed !", etc.

Fonctions qui retournent une valeur
function additionner(a, b) {
    return a + b;
}

// Stocker le r√©sultat et l'afficher
let resultat = additionner(5, 7);
console.log(resultat);  // Affiche 12

üí° Explication :

La fonction additionne deux nombres et retourne le r√©sultat.

La valeur est stock√©e dans resultat et affich√©e avec console.log().

Fonctions fl√©ch√©es (Arrow Functions)
Depuis ES6, JavaScript propose une nouvelle fa√ßon d'√©crire des fonctions plus courte :

const multiplier = (x, y) => x * y;

console.log(multiplier(3, 4));  // Affiche 12

üí° Explication :

(x, y) => x * y; est une fonction fl√©ch√©e.

Elle est √©quivalente √† :

function multiplier(x, y) {
    return x * y;
}

4. Diff√©rences entre JavaScript et Java
Caract√©ristique	Java	JavaScript
Type de langage	Langage compil√©	Langage interpr√©t√©
D√©claration des variables	int x = 5; (typ√©)	let x = 5; (dynamique)
Syntaxe des fonctions	public static void fonction()	function fonction()
Utilisation principale	Applications (Desktop, Android)	Web (Frontend & Backend)
Ex√©cution	N√©cessite un compilateur (javac)	Directement dans le navigateur`
      });
      
    if (summaryError) {
      console.error('Error inserting JavaScript summary:', summaryError);
    } else {
      console.log('JavaScript summary inserted successfully');
      
      // Create a badge for JavaScript mastery
      const { error: badgeError } = await supabase
        .from('badges')
        .insert({
          name: 'JavaScript Mastery',
          description: 'Completed JavaScript summary and quiz',
          icon: 'award',
          points: 100
        })
        .select()
        .single();
        
      if (badgeError && !badgeError.message.includes('duplicate')) {
        console.error('Error creating JavaScript badge:', badgeError);
      } else {
        console.log('JavaScript badge created successfully');
      }
    }
  } catch (error) {
    console.error('Error inserting JavaScript summary:', error);
  }
};

runSeeder();
