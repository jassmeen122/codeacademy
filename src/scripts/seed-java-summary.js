
import { supabase } from '../integrations/supabase/client';

const insertJavaSummary = async () => {
  try {
    // First, get the Java language ID from the programming_languages table
    const { data: languageData, error: languageError } = await supabase
      .from('programming_languages')
      .select('id')
      .eq('name', 'Java')
      .single();

    if (languageError) {
      console.error('Error fetching Java language ID:', languageError);
      return;
    }

    if (!languageData) {
      console.error('Java language not found in the database');
      return;
    }

    const javaLanguageId = languageData.id;

    // Check if a summary already exists for Java
    const { data: existingSummary, error: checkError } = await supabase
      .from('language_summaries')
      .select('id')
      .eq('language_id', javaLanguageId)
      .maybeSingle();

    if (checkError) {
      console.error('Error checking for existing Java summary:', checkError);
      return;
    }

    if (existingSummary) {
      console.log('Java summary already exists, updating it...');
      
      // Update the existing summary
      const { error: updateError } = await supabase
        .from('language_summaries')
        .update({
          title: 'Java Language Summary',
          content: javaContent
        })
        .eq('id', existingSummary.id);

      if (updateError) {
        console.error('Error updating Java summary:', updateError);
        return;
      }
      
      console.log('Java summary updated successfully');
    } else {
      console.log('Creating new Java summary...');
      
      // Insert the new summary
      const { error: insertError } = await supabase
        .from('language_summaries')
        .insert({
          language_id: javaLanguageId,
          title: 'Java Language Summary',
          content: javaContent
        });

      if (insertError) {
        console.error('Error inserting Java summary:', insertError);
        return;
      }
      
      console.log('Java summary inserted successfully');
    }

    // Create Java Mastery badge if it doesn't exist
    const { data: existingBadge, error: badgeCheckError } = await supabase
      .from('badges')
      .select('id')
      .eq('name', 'Java Mastery')
      .maybeSingle();

    if (badgeCheckError) {
      console.error('Error checking for existing Java badge:', badgeCheckError);
      return;
    }

    if (!existingBadge) {
      console.log('Creating Java Mastery badge...');
      
      const { error: badgeError } = await supabase
        .from('badges')
        .insert({
          name: 'Java Mastery',
          description: 'Completed Java summary and quiz',
          icon: 'award',
          points: 100
        });

      if (badgeError) {
        console.error('Error creating Java badge:', badgeError);
        return;
      }
      
      console.log('Java Mastery badge created successfully');
    } else {
      console.log('Java Mastery badge already exists');
    }

  } catch (error) {
    console.error('Unexpected error:', error);
  }
};

// Java content
const javaContent = `1. D√©claration des variables en Java
Qu'est-ce qu'une variable ?
Comme en Python, une variable en Java est un espace m√©moire o√π l'on stocke une donn√©e.

Cependant, en Java, contrairement √† Python, il faut toujours pr√©ciser le type de la variable.

Syntaxe pour d√©clarer une variable en Java
java
int age = 19;  // Une variable enti√®re (int)
double prix = 99.99;  // Un nombre √† virgule (double)
boolean estActif = true;  // Une valeur bool√©enne (true/false)
String nom = "Yassmine";  // Une cha√Æne de caract√®res (String)

üìå Diff√©rence avec Python :

En Python, on √©crit juste nom = "Yassmine", et Python devine que c'est une cha√Æne de caract√®res.

En Java, on doit obligatoirement dire que c'est un String.

Les types de donn√©es en Java
Voici les principaux types que tu dois conna√Ætre :

Type	Description	Exemple
int	Nombre entier	int age = 25;
double	Nombre √† virgule	double prix = 9.99;
boolean	Vrai ou Faux	boolean estVrai = true;
char	Un seul caract√®re	char lettre = 'A';
String	Texte	String nom = "Yassmine";

2. Les conditions en Java
Les conditions permettent d'ex√©cuter du code seulement si une certaine situation est vraie.

La condition if...else en Java
Prenons un exemple simple :

java
int age = 19;

if (age >= 18) {
    System.out.println("Vous √™tes majeur, vous pouvez entrer.");
} else {
    System.out.println("Vous √™tes mineur, entr√©e interdite.");
}

üîπ Explication :

if (condition) ‚Üí V√©rifie si la condition est vraie.

else ‚Üí Ex√©cute ce code si la condition est fausse.

System.out.println() ‚Üí Affiche du texte √† l'√©cran.

üìå Diff√©rence avec Python :

En Python, on utilise print() au lieu de System.out.println().

Java utilise des {} pour entourer les blocs de code, alors que Python utilise l'indentation.

La condition if...else if...else
Imaginons qu'on veut classer une note en fonction d'une grille :

java
int note = 15;

if (note >= 18) {
    System.out.println("Excellent");
} else if (note >= 14) {  // Sinon si
    System.out.println("Bien");
} else if (note >= 10) {
    System.out.println("Passable");
} else {
    System.out.println("√âchec");
}

üîπ Ce qu'il faut retenir :

else if permet d'ajouter d'autres conditions.

Le programme s'arr√™te d√®s qu'une condition est vraie.

Les conditions multiples avec && et ||
Comme en Python :

&& (ET logique) ‚Üí Les deux conditions doivent √™tre vraies.

|| (OU logique) ‚Üí Au moins une des conditions doit √™tre vraie.

Exemple avec && (ET logique)
java
int age = 20;
int argent = 50;

if (age >= 18 && argent >= 100) { 
    System.out.println("Vous pouvez entrer dans la bo√Æte de nuit.");
} else {
    System.out.println("Vous ne pouvez pas entrer.");
}

üí° Explication :
‚úîÔ∏è La personne doit avoir plus de 18 ans ET au moins 100‚Ç¨.
‚ùå Si l'une des conditions est fausse, elle ne peut pas entrer.

Exemple avec || (OU logique)
java
boolean carteMembre = false;
int argent = 150;

if (carteMembre || argent >= 100) { 
    System.out.println("Vous avez acc√®s √† la salle VIP !");
} else {
    System.out.println("Acc√®s refus√©.");
}

üí° Explication :
‚úîÔ∏è Si la personne a une carte membre OU si elle a 100‚Ç¨ ou plus, elle peut entrer.

3. Les fonctions en Java
Une fonction (appel√©e "m√©thode" en Java) est un bloc de code qui effectue une action pr√©cise.

Cr√©er une fonction simple
En Java, une fonction est d√©finie avec :

Un type de retour (void, int, String, etc.).

Un nom de fonction.

Des parenth√®ses () avec ou sans param√®tres.

Un corps de fonction {} qui contient le code √† ex√©cuter.

Exemple d'une fonction sans param√®tres
java
public static void direBonjour() {
    System.out.println("Bonjour, bienvenue en Java !");
}

// Appel de la fonction
direBonjour();

üîπ Explication :

public static void ‚Üí Mot-cl√© utilis√© pour d√©finir une fonction en Java.

direBonjour() ‚Üí Nom de la fonction.

void signifie que la fonction ne retourne rien.

Fonctions avec param√®tres
Une fonction peut prendre des informations en entr√©e (comme en Python).

java
public static void saluer(String nom) {
    System.out.println("Bonjour, " + nom + " !");
}

// Appel de la fonction
saluer("Yassmine");
saluer("Ahmed");

üí° Explication :

La fonction saluer() prend un param√®tre nom de type String.

Elle affiche "Bonjour, Yassmine !" si on appelle saluer("Yassmine").

Fonctions qui retournent une valeur
Une fonction peut renvoyer un r√©sultat gr√¢ce au mot-cl√© return.

java
public static int additionner(int a, int b) {
    return a + b;  // Retourne la somme
}

public static void main(String[] args) {
    int somme = additionner(5, 7);
    System.out.println(somme);  // Affiche 12
}

üí° Explication :

additionner(int a, int b) prend deux nombres et retourne leur somme.

On stocke le r√©sultat dans somme et on l'affiche.

Fonctions avec param√®tres par d√©faut ?
üí° En Java, il n'y a pas de param√®tres par d√©faut comme en Python.
On doit cr√©er plusieurs versions d'une fonction (surcharge de m√©thode) :

java
public static void presentation(String nom) {
    System.out.println("Je m'appelle " + nom + " et j'ai 18 ans.");
}

public static void presentation(String nom, int age) {
    System.out.println("Je m'appelle " + nom + " et j'ai " + age + " ans.");
}

// Appel des fonctions
presentation("Yassmine");  // Prend 18 ans par d√©faut
presentation("Ahmed", 20);

Ici, la premi√®re fonction suppose 18 ans par d√©faut, et la deuxi√®me permet de pr√©ciser l'√¢ge.`;

// Execute the function
insertJavaSummary();
