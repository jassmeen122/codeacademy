// Default language summaries that will be used if no data exists in the database
export const defaultLanguageSummaries: Record<string, { title: string, content: string }> = {
  python: {
    title: "Concepts fondamentaux en Python",
    content: `# 1. D√©claration des variables en Python

Qu'est-ce qu'une variable ?
Une variable est un espace m√©moire o√π l'on stocke une donn√©e. Elle permet de conserver une information et de la r√©utiliser plus tard dans le programme.

Imagine une bo√Æte o√π tu ranges un objet. Si tu √©cris "Nom" sur la bo√Æte et que tu mets un papier avec "Yassmine" √† l'int√©rieur, cette bo√Æte devient une variable qui contient la valeur "Yassmine".

En Python, il est tr√®s simple de cr√©er une variable :

\`\`\`python
nom = "Yassmine"  # Une variable contenant du texte
age = 19  # Une variable contenant un nombre entier
prix = 99.99  # Une variable contenant un nombre d√©cimal
est_actif = True  # Une variable contenant une valeur bool√©enne (Vrai ou Faux)
\`\`\`

üí° Remarque importante :

Python d√©tecte automatiquement le type de la variable.

Contrairement √† d'autres langages comme Java ou C, on ne d√©clare pas le type (ex: int, string).

Par exemple, dans Java, il faut √©crire :

\`\`\`java
String nom = "Yassmine";
int age = 19;
\`\`\`

Mais en Python, il suffit de faire :

\`\`\`python
nom = "Yassmine"
age = 19
\`\`\`

C'est plus simple et plus rapide !

# 2. Les conditions en Python

Les conditions permettent d'ex√©cuter des instructions uniquement si certaines situations sont vraies.
Par exemple, si tu veux savoir si une personne peut entrer dans une bo√Æte de nuit, tu vas poser une condition :

Si elle a 18 ans ou plus, elle peut entrer.

Sinon, elle ne peut pas entrer.

En Python, cela s'√©crit comme ceci :

\`\`\`python
age = 19

if age >= 18:  # Si l'√¢ge est sup√©rieur ou √©gal √† 18
    print("Vous √™tes majeur, vous pouvez entrer.")  
else:  # Sinon
    print("Vous √™tes mineur, l'entr√©e est interdite.")
\`\`\`

üîπ Explication du code :

if signifie "si", il teste une condition.

>= signifie "sup√©rieur ou √©gal √†".

else signifie "sinon", c'est-√†-dire que si la condition n'est pas respect√©e, on ex√©cute le code qui suit.

## Ajout de plusieurs conditions avec elif

Parfois, il faut tester plusieurs cas. Par exemple, si on veut classer une note :

Si la note est sup√©rieure ou √©gale √† 18 ‚Üí "Excellent"

Sinon si la note est entre 14 et 17 ‚Üí "Bien"

Sinon si la note est entre 10 et 13 ‚Üí "Passable"

Sinon ‚Üí "√âchec"

Voici le code Python correspondant :

\`\`\`python
note = 15

if note >= 18:
    print("Excellent")
elif note >= 14:  # Sinon si la note est entre 14 et 17
    print("Bien")
elif note >= 10:  # Sinon si la note est entre 10 et 13
    print("Passable")
else:  # Si la note est en dessous de 10
    print("√âchec")
\`\`\`

üîπ Pourquoi elif ?

elif signifie "sinon si", il permet d'ajouter d'autres conditions.

Le programme teste les conditions dans l'ordre et s'arr√™te d√®s qu'une condition est vraie.

## Les conditions multiples avec and et or

On peut combiner plusieurs conditions :

and (ET) ‚Üí Les deux conditions doivent √™tre vraies.

or (OU) ‚Üí Au moins une des conditions doit √™tre vraie.

Exemple avec and :

\`\`\`python
age = 20
argent = 50

if age >= 18 and argent >= 100:  # Les DEUX conditions doivent √™tre vraies
    print("Vous pouvez entrer dans la bo√Æte de nuit.")
else:
    print("Vous ne pouvez pas entrer.")
\`\`\`

Ici, pour entrer :
‚úîÔ∏è Il faut avoir au moins 18 ans ET au moins 100‚Ç¨.
Si l'une des conditions est fausse, l'entr√©e est refus√©e.

Exemple avec or :

\`\`\`python
carte_membre = False
argent = 150

if carte_membre or argent >= 100:  # UNE des conditions doit √™tre vraie
    print("Vous avez acc√®s √† la salle VIP !")
else:
    print("Acc√®s refus√©.")
\`\`\`

Ici, on peut acc√©der √† la salle VIP SI :
‚úîÔ∏è On a une carte membre OU on a plus de 100‚Ç¨.

# 3. Les fonctions en Python

Une fonction est un morceau de code qui r√©alise une t√¢che pr√©cise.
Au lieu d'√©crire le m√™me code plusieurs fois, on le met dans une fonction et on l'appelle quand on en a besoin.

üí° Pourquoi utiliser une fonction ?
‚úÖ √âvite les r√©p√©titions de code.
‚úÖ Rend le programme plus clair et mieux organis√©.
‚úÖ Permet de r√©utiliser le code facilement.

## Cr√©er et utiliser une fonction simple

Une fonction en Python se d√©finit avec le mot-cl√© def suivi du nom de la fonction et des parenth√®ses ().

\`\`\`python
def dire_bonjour():
    print("Bonjour, bienvenue en Python !")

# Appel de la fonction
dire_bonjour()
\`\`\`

üîπ Explication :

def dire_bonjour(): cr√©e une fonction appel√©e dire_bonjour.

√Ä l'int√©rieur, print() affiche un message.

Pour ex√©cuter la fonction, on l'appelle avec dire_bonjour().

## Fonctions avec param√®tres

Une fonction peut recevoir des informations gr√¢ce aux param√®tres.

\`\`\`python
def saluer(nom):
    print(f"Bonjour, {nom} !")

saluer("Yassmine")  # Bonjour, Yassmine !
saluer("Ahmed")  # Bonjour, Ahmed !
\`\`\`

üîπ Ici, nom est un param√®tre, il permet de passer un pr√©nom √† la fonction.

## Fonctions qui retournent une valeur (return)

Parfois, une fonction doit renvoyer un r√©sultat qu'on peut utiliser dans le programme.
On utilise return pour renvoyer une valeur.

\`\`\`python
def additionner(a, b):
    return a + b  # Retourne la somme

somme = additionner(5, 7)
print(somme)  # Affiche 12
\`\`\`

üîπ additionner(a, b) renvoie a + b, puis on stocke ce r√©sultat dans somme.

## Fonctions avec param√®tres par d√©faut

Une fonction peut avoir un param√®tre avec une valeur par d√©faut.

\`\`\`python
def presentation(nom, age=18):
    print(f"Je m'appelle {nom} et j'ai {age} ans.")

presentation("Yassmine")  # Valeur par d√©faut : 18 ans
presentation("Ahmed", 20)  # Remplace 18 par 20
\`\`\`

Si aucun √¢ge n'est donn√©, Python prend 18 par d√©faut.

# Conclusion

On a vu trois concepts essentiels en Python :
‚úîÔ∏è Les variables ‚Üí Stocker des valeurs.
‚úîÔ∏è Les conditions ‚Üí Ex√©cuter un code selon une situation.
‚úîÔ∏è Les fonctions ‚Üí Organiser le code pour √©viter les r√©p√©titions.

Ces notions sont la base de tout programme en Python !`
  },
  java: {
    title: "Concepts fondamentaux en Java",
    content: `# 1. D√©claration des variables en Java

Qu'est-ce qu'une variable ?
Comme en Python, une variable en Java est un espace m√©moire o√π l'on stocke une donn√©e.

Cependant, en Java, contrairement √† Python, il faut toujours pr√©ciser le type de la variable.

Syntaxe pour d√©clarer une variable en Java

\`\`\`java
int age = 19;  // Une variable enti√®re (int)
double prix = 99.99;  // Un nombre √† virgule (double)
boolean estActif = true;  // Une valeur bool√©enne (true/false)
String nom = "Yassmine";  // Une cha√Æne de caract√®res (String)
\`\`\`

üìå Diff√©rence avec Python :

En Python, on √©crit juste nom = "Yassmine", et Python devine que c'est une cha√Æne de caract√®res.

En Java, on doit obligatoirement dire que c'est un String.

## Les types de donn√©es en Java

Voici les principaux types que tu dois conna√Ætre :

Type | Description | Exemple
--- | --- | ---
int | Nombre entier | int age = 25;
double | Nombre √† virgule | double prix = 9.99;
boolean | Vrai ou Faux | boolean estVrai = true;
char | Un seul caract√®re | char lettre = 'A';
String | Texte | String nom = "Yassmine";

# 2. Les conditions en Java

Les conditions permettent d'ex√©cuter du code seulement si une certaine situation est vraie.

## La condition if...else en Java

Prenons un exemple simple :

\`\`\`java
int age = 19;

if (age >= 18) {
    System.out.println("Vous √™tes majeur, vous pouvez entrer.");
} else {
    System.out.println("Vous √™tes mineur, l'entr√©e est interdite.");
}
\`\`\`

üîπ Explication :

if (condition) ‚Üí V√©rifie si la condition est vraie.

else ‚Üí Ex√©cute ce code si la condition est fausse.

System.out.println() ‚Üí Affiche du texte √† l'√©cran.

üìå Diff√©rence avec Python :

En Python, on utilise print() au lieu de System.out.println().

Java utilise des {} pour entourer les blocs de code, alors que Python utilise l'indentation.

## La condition if...else if...else

Imaginons qu'on veut classer une note en fonction d'une grille :

\`\`\`java
int note = 15;

if (note >= 18) {
    System.out.println("Excellent");
} else if (note >= 14) {  // Sinon si
    System.out.println("Bien");
} else if (note >= 10) {
    System.out.println("Passable");
} else {
    System.out.println("√âchec");
}
\`\`\`

üîπ Ce qu'il faut retenir :

else if permet d'ajouter d'autres conditions.

Le programme s'arr√™te d√®s qu'une condition est vraie.

## Les conditions multiples avec && et ||

Comme en Python :

&& (ET logique) ‚Üí Les deux conditions doivent √™tre vraies.

|| (OU logique) ‚Üí Au moins une des conditions doit √™tre vraie.

Exemple avec && (ET logique)

\`\`\`java
int age = 20;
int argent = 50;

if (age >= 18 && argent >= 100) { 
    System.out.println("Vous pouvez entrer dans la bo√Æte de nuit.");
} else {
    System.out.println("Vous ne pouvez pas entrer.");
}
\`\`\`

üí° Explication :
‚úîÔ∏è La personne doit avoir plus de 18 ans ET au moins 100‚Ç¨.
‚ùå Si l'une des conditions est fausse, elle ne peut pas entrer.

Exemple avec || (OU logique)

\`\`\`java
boolean carteMembre = false;
int argent = 150;

if (carteMembre || argent >= 100) { 
    System.out.println("Vous avez acc√®s √† la salle VIP !");
} else {
    System.out.println("Acc√®s refus√©.");
}
\`\`\`

üí° Explication :
‚úîÔ∏è Si la personne a une carte membre OU si elle a 100‚Ç¨ ou plus, elle peut entrer.

# 3. Les fonctions en Java

Une fonction (appel√©e "m√©thode" en Java) est un bloc de code qui effectue une action pr√©cise.

## Cr√©er une fonction simple

En Java, une fonction est d√©finie avec :

Un type de retour (void, int, String, etc.).

Un nom de fonction.

Des parenth√®ses () avec ou sans param√®tres.

Un corps de fonction {} qui contient le code √† ex√©cuter.

Exemple d'une fonction sans param√®tres

\`\`\`java
public static void direBonjour() {
    System.out.println("Bonjour, bienvenue en Java !");
}

// Appel de la fonction
direBonjour();
\`\`\`

üîπ Explication :

public static void ‚Üí Mot-cl√© utilis√© pour d√©finir une fonction en Java.

direBonjour() ‚Üí Nom de la fonction.

void signifie que la fonction ne retourne rien.

## Fonctions avec param√®tres

Une fonction peut prendre des informations en entr√©e (comme en Python).

\`\`\`java
public static void saluer(String nom) {
    System.out.println("Bonjour, " + nom + " !");
}

// Appel de la fonction
saluer("Yassmine");
saluer("Ahmed");
\`\`\`

üí° Explication :

La fonction saluer() prend un param√®tre nom de type String.

Elle affiche "Bonjour, Yassmine !" si on appelle saluer("Yassmine").

## Fonctions qui retournent une valeur

Une fonction peut renvoyer un r√©sultat gr√¢ce au mot-cl√© return.

\`\`\`java
public static int additionner(int a, int b) {
    return a + b;  // Retourne la somme
}

public static void main(String[] args) {
    int somme = additionner(5, 7);
    System.out.println(somme);  // Affiche 12
}
\`\`\`

üí° Explication :

additionner(int a, int b) prend deux nombres et retourne leur somme.

On stocke le r√©sultat dans somme et on l'affiche.

## Fonctions avec param√®tres par d√©faut ?

üí° En Java, il n'y a pas de param√®tres par d√©faut comme en Python.
On doit cr√©er plusieurs versions d'une fonction (surcharge de m√©thode) :

\`\`\`java
public static void presentation(String nom) {
    System.out.println("Je m'appelle " + nom + " et j'ai 18 ans.");
}

public static void presentation(String nom, int age) {
    System.out.println("Je m'appelle " + nom + " et j'ai " + age + " ans.");
}

// Appel des fonctions
presentation("Yassmine");  // Prend 18 ans par d√©faut
presentation("Ahmed", 20);
\`\`\`

Ici, la premi√®re fonction suppose 18 ans par d√©faut, et la deuxi√®me permet de pr√©ciser l'√¢ge.

# Conclusion

On a vu trois concepts essentiels en Java :
‚úîÔ∏è Les variables ‚Üí Stocker des valeurs en pr√©cisant leur type.
‚úîÔ∏è Les conditions ‚Üí Ex√©cuter un code en fonction d'une situation.
‚úîÔ∏è Les fonctions ‚Üí √âviter les r√©p√©titions et organiser le code.

üí° Diff√©rences avec Python :

En Java, on d√©clare toujours le type des variables.

Java utilise des {} au lieu d'indentation.

Pour afficher du texte, on utilise System.out.println() au lieu de print().

Les fonctions en Java s'appellent m√©thodes, et elles doivent toujours √™tre d√©finies dans une classe.

Java est plus strict que Python, mais il est tr√®s puissant et utilis√© dans les grandes applications !`
  },
  javascript: {
    title: "Concepts fondamentaux en JavaScript",
    content: `# 1. D√©claration des variables en JavaScript

Qu'est-ce qu'une variable ?
Une variable est un espace en m√©moire o√π l'on stocke une donn√©e. Contrairement √† Java, JavaScript est un langage dynamique, ce qui signifie qu'on n'a pas besoin de pr√©ciser le type de donn√©es (comme en Python).

## Les trois fa√ßons de d√©clarer une variable en JavaScript
Il existe trois mots-cl√©s pour d√©clarer une variable :

var (ancienne m√©thode, √† √©viter)

let (m√©thode recommand√©e)

const (pour les valeurs constantes)

Exemple :

\`\`\`javascript
var nom = "Yassmine"; // Ancienne mani√®re (peut poser des probl√®mes)
let age = 19;         // Nouvelle mani√®re, recommand√©e
const pays = "Maroc"; // Une valeur qui ne changera pas
\`\`\`

## Quelle est la diff√©rence entre var, let et const ?
Mot-cl√© | Modification possible ? | Port√©e (scope)
--- | --- | ---
var | Oui | Fonction
let | Oui | Bloc {}
const | Non | Bloc {}

üí° Conseil :

Utilise let pour les variables qui peuvent changer.

Utilise const si la valeur ne doit jamais changer.

√âvite var, car il peut cr√©er des bugs.

# 2. Conditions en JavaScript
Une condition permet d'ex√©cuter un code seulement si une certaine situation est vraie.

## Condition if simple

\`\`\`javascript
let age = 19;

if (age >= 18) {
    console.log("Vous √™tes majeur.");
}
\`\`\`

üí° Explication :

Si age est sup√©rieur ou √©gal √† 18, alors on affiche "Vous √™tes majeur.".

## Condition if...else

\`\`\`javascript
let age = 16;

if (age >= 18) {
    console.log("Vous √™tes majeur.");
} else {
    console.log("Vous √™tes mineur.");
}
\`\`\`

üí° Explication :

Si age est inf√©rieur √† 18, alors on affiche "Vous √™tes mineur.".

## Condition if...else if...else
Si on veut tester plusieurs cas, on utilise else if :

\`\`\`javascript
let note = 15;

if (note >= 18) {
    console.log("Excellent !");
} else if (note >= 14) {
    console.log("Bien !");
} else if (note >= 10) {
    console.log("Passable.");
} else {
    console.log("√âchec.");
}
\`\`\`

üí° Explication :

Si note est sup√©rieure ou √©gale √† 18, on affiche "Excellent".

Sinon, si note >= 14, on affiche "Bien".

Sinon, si note >= 10, on affiche "Passable".

Sinon, on affiche "√âchec."

## Conditions avec && et ||
Comme en Java :

&& (ET logique) ‚Üí Les deux conditions doivent √™tre vraies.

|| (OU logique) ‚Üí Au moins une condition doit √™tre vraie.

Exemple avec && (ET logique)

\`\`\`javascript
let argent = 50;
let age = 20;

if (age >= 18 && argent >= 100) {
    console.log("Vous pouvez entrer en bo√Æte.");
} else {
    console.log("Acc√®s refus√©.");
}
\`\`\`

üí° Explication :
‚úîÔ∏è La personne doit avoir plus de 18 ans ET au moins 100‚Ç¨.

Exemple avec || (OU logique)

\`\`\`javascript
let carteMembre = false;
let argent = 150;

if (carteMembre || argent >= 100) {
    console.log("Acc√®s VIP accord√©.");
} else {
    console.log("Acc√®s refus√©.");
}
\`\`\`

üí° Explication :
‚úîÔ∏è Si la personne a une carte membre OU si elle a au moins 100‚Ç¨, elle peut entrer.

# 3. Fonctions en JavaScript
Une fonction est un bloc de code qui effectue une action et peut √™tre r√©utilis√©e plusieurs fois.

## Cr√©er une fonction sans param√®tres

\`\`\`javascript
function direBonjour() {
    console.log("Bonjour, bienvenue !");
}

// Appel de la fonction
direBonjour();
\`\`\`

üí° Explication :

function direBonjour() ‚Üí D√©finit une fonction nomm√©e direBonjour.

console.log("Bonjour, bienvenue !") ‚Üí Affiche "Bonjour, bienvenue !".

## Fonctions avec param√®tres

\`\`\`javascript
function saluer(nom) {
    console.log("Bonjour, " + nom + " !");
}

// Appel de la fonction
saluer("Yassmine");
saluer("Ahmed");
\`\`\`

üí° Explication :

La fonction saluer(nom) prend un param√®tre nom.

Elle affiche "Bonjour, Yassmine !", "Bonjour, Ahmed !", etc.

## Fonctions qui retournent une valeur

\`\`\`javascript
function additionner(a, b) {
    return a + b;
}

// Stocker le r√©sultat et l'afficher
let resultat = additionner(5, 7);
console.log(resultat);  // Affiche 12
\`\`\`

üí° Explication :

La fonction additionne deux nombres et retourne le r√©sultat.

La valeur est stock√©e dans resultat et affich√©e avec console.log().

## Fonctions fl√©ch√©es (Arrow Functions)
Depuis ES6, JavaScript propose une nouvelle fa√ßon d'√©crire des fonctions plus courte :

\`\`\`javascript
const multiplier = (x, y) => x * y;

console.log(multiplier(3, 4));  // Affiche 12
\`\`\`

üí° Explication :

(x, y) => x * y; est une fonction fl√©ch√©e.

Elle est √©quivalente √† :

\`\`\`javascript
function multiplier(x, y) {
    return x * y;
}
\`\`\`

# Conclusion
‚úîÔ∏è JavaScript est un langage dynamique utilis√© pour le d√©veloppement web.
‚úîÔ∏è Il permet de d√©clarer des variables sans pr√©ciser le type.
‚úîÔ∏è Les conditions sont similaires √† celles de Java et Python.
‚úîÔ∏è Les fonctions peuvent √™tre classiques ou sous forme fl√©ch√©e (ES6).
‚úîÔ∏è Il est utilis√© dans les navigateurs (Frontend) et aussi c√¥t√© serveur (Node.js).

üí° JavaScript est essentiel pour le d√©veloppement web moderne ! üöÄ`
  },
  php: {
    title: "Introduction √† PHP",
    content: `# Introduction √† PHP

PHP (Hypertext Preprocessor) est un langage de programmation c√¥t√© serveur utilis√© principalement pour le d√©veloppement web. Il permet de g√©n√©rer des pages dynamiques, se connecter √† une base de donn√©es, et g√©rer les formulaires.

üí° Points forts de PHP :
‚úîÔ∏è Facile √† apprendre et √† utiliser.
‚úîÔ∏è Int√©gr√© avec HTML.
‚úîÔ∏è Compatible avec MySQL, PostgreSQL, SQLite, etc.
‚úîÔ∏è Fonctionne sur tous les serveurs web (Apache, Nginx‚Ä¶).

## 1. D√©claration des Variables en PHP

En PHP, les variables commencent toujours par $, et il n'est pas n√©cessaire de pr√©ciser le type de la variable (PHP est un langage faiblement typ√©).

### Syntaxe des Variables

\`\`\`php
<?php
$nom = "Yassmine";  // Cha√Æne de caract√®res
$age = 19;          // Entier
$prix = 15.99;      // Float
$estConnecte = true; // Bool√©en

echo "Nom : $nom, Age : $age, Prix : $prix";
?>
\`\`\`

üí° Explication :

$nom = "Yassmine"; ‚Üí Variable contenant une cha√Æne de caract√®res.

$age = 19; ‚Üí Variable de type entier.

$prix = 15.99; ‚Üí Variable de type d√©cimal.

$estConnecte = true; ‚Üí Bool√©en (true ou false).

üëâ PHP d√©duit automatiquement le type des variables en fonction de la valeur qu'on leur attribue.

## 2. Conditions en PHP (if, else if, else)

PHP utilise les m√™mes conditions que la plupart des langages de programmation (if, else if, else).

### Condition if simple

\`\`\`php
<?php
$age = 20;

if ($age >= 18) {
    echo "Vous √™tes majeur.";
}
?>
\`\`\`

üí° Explication :
Si $age est sup√©rieur ou √©gal √† 18, on affiche "Vous √™tes majeur.".

### Condition if...else

\`\`\`php
<?php
$age = 16;

if ($age >= 18) {
    echo "Vous √™tes majeur.";
} else {
    echo "Vous √™tes mineur.";
}
?>
\`\`\`

üí° Explication :
Si $age est inf√©rieur √† 18, alors on affiche "Vous √™tes mineur.".

### Condition if...else if...else

\`\`\`php
<?php
$note = 15;

if ($note >= 18) {
    echo "Excellent !";
} elseif ($note >= 14) {
    echo "Bien !";
} elseif ($note >= 10) {
    echo "Passable.";
} else {
    echo "√âchec.";
}
?>
\`\`\`

üí° Explication :

Si note >= 18, on affiche "Excellent !".

Si note >= 14, on affiche "Bien !".

Si note >= 10, on affiche "Passable".

Sinon, on affiche "√âchec."

## 3. Fonctions en PHP

Une fonction est un bloc de code qui ex√©cute une t√¢che sp√©cifique.

### D√©claration d'une fonction sans param√®tre

\`\`\`php
<?php
function direBonjour() {
    echo "Bonjour, bienvenue sur notre site !";
}

direBonjour();
?>
\`\`\`

üí° Explication :

function direBonjour() ‚Üí D√©claration d'une fonction nomm√©e direBonjour.

echo "Bonjour..."; ‚Üí Affichage d'un message.

direBonjour(); ‚Üí Appel de la fonction.

### Fonction avec param√®tres

\`\`\`php
<?php
function saluer($nom) {
    echo "Bonjour, $nom !";
}

saluer("Yassmine");
?>
\`\`\`

üí° Explication :

$nom est un param√®tre pass√© √† la fonction saluer.

Lorsqu'on appelle saluer("Yassmine");, le message "Bonjour, Yassmine !" s'affiche.

### Fonction avec retour de valeur

\`\`\`php
<?php
function additionner($a, $b) {
    return $a + $b;
}

$resultat = additionner(5, 7);
echo "R√©sultat : $resultat";
?>
\`\`\`

üí° Explication :

La fonction additionner($a, $b) retourne la somme de $a et $b.

Le r√©sultat est stock√© dans la variable $resultat et affich√©.

## 4. PHP et HTML : Exemple Complet

PHP est souvent int√©gr√© dans des pages HTML.

\`\`\`php
<!DOCTYPE html>
<html>
<head>
    <title>Exemple PHP</title>
</head>
<body>

<h1>Bienvenue sur mon site</h1>

<?php
$nom = "Yassmine";
echo "<p>Bonjour, $nom !</p>";
?>

</body>
</html>
\`\`\`

üí° Explication :

PHP est int√©gr√© entre <?php ... ?>.

L'instruction echo "<p>Bonjour, $nom !</p>"; affiche du texte dans une balise HTML.

# Conclusion

‚úîÔ∏è PHP est un langage puissant pour le d√©veloppement web dynamique.
‚úîÔ∏è Les variables sont d√©clar√©es avec $ sans type sp√©cifique.
‚úîÔ∏è Les conditions et les fonctions sont similaires aux autres langages.
‚úîÔ∏è PHP fonctionne en combinaison avec HTML pour g√©n√©rer des pages interactives.

üöÄ PHP est l'un des langages les plus utilis√©s pour cr√©er des sites web dynamiques comme Facebook, WordPress et Wikipedia !`
  },
  sql: {
    title: "Les fondamentaux du SQL",
    content: `# Introduction √† SQL

SQL (Structured Query Language) est un langage de programmation utilis√© pour g√©rer les bases de donn√©es relationnelles. Il permet de cr√©er, modifier, interroger et administrer des bases de donn√©es.

## Structure d'une Base de Donn√©es Relationnelle

Une base de donn√©es relationnelle est compos√©e de tables, qui sont des structures organis√©es en lignes (enregistrements) et colonnes (champs).

## Cr√©ation de Base de Donn√©es et de Tables

\`\`\`sql
-- Cr√©ation d'une base de donn√©es
CREATE DATABASE ma_base_de_donnees;

-- Utilisation d'une base de donn√©es
USE ma_base_de_donnees;

-- Cr√©ation d'une table
CREATE TABLE utilisateurs (
    id INT PRIMARY KEY AUTO_INCREMENT,
    nom VARCHAR(50) NOT NULL,
    prenom VARCHAR(50) NOT NULL,
    email VARCHAR(100) UNIQUE,
    date_naissance DATE,
    date_inscription TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

-- Cr√©ation d'une autre table avec une cl√© √©trang√®re
CREATE TABLE commandes (
    id INT PRIMARY KEY AUTO_INCREMENT,
    utilisateur_id INT,
    produit VARCHAR(100) NOT NULL,
    quantite INT DEFAULT 1,
    date_commande TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (utilisateur_id) REFERENCES utilisateurs(id)
);
\`\`\`

## Insertion de Donn√©es

\`\`\`sql
-- Insertion d'un seul enregistrement
INSERT INTO utilisateurs (nom, prenom, email, date_naissance)
VALUES ('Dupont', 'Jean', 'jean.dupont@example.com', '1990-05-15');

-- Insertion de plusieurs enregistrements
INSERT INTO utilisateurs (nom, prenom, email, date_naissance)
VALUES 
    ('Martin', 'Sophie', 'sophie.martin@example.com', '1985-12-10'),
    ('Durand', 'Pierre', 'pierre.durand@example.com', '1992-08-22');
\`\`\`

## Requ√™tes de S√©lection

\`\`\`sql
-- S√©lection de tous les enregistrements et toutes les colonnes
SELECT * FROM utilisateurs;

-- S√©lection de colonnes sp√©cifiques
SELECT nom, prenom, email FROM utilisateurs;

-- S√©lection avec condition
SELECT * FROM utilisateurs WHERE date_naissance > '1990-01-01';

-- S√©lection avec plusieurs conditions
SELECT * FROM utilisateurs
WHERE date_naissance > '1990-01-01' AND nom = 'Dupont';

-- Utilisation de OR
SELECT * FROM utilisateurs
WHERE nom = 'Dupont' OR nom = 'Martin';

-- Utilisation de IN
SELECT * FROM utilisateurs
WHERE nom IN ('Dupont', 'Martin', 'Durand');

-- Utilisation de LIKE pour les recherches partielles
SELECT * FROM utilisateurs
WHERE email LIKE '%@example.com';

-- Utilisation de BETWEEN pour les plages de valeurs
SELECT * FROM utilisateurs
WHERE date_naissance BETWEEN '1980-01-01' AND '1989-12-31';

-- Tri des r√©sultats
SELECT * FROM utilisateurs
ORDER BY nom ASC, prenom DESC;

-- Limitation du nombre de r√©sultats
SELECT * FROM utilisateurs
LIMIT 10;

-- D√©calage des r√©sultats (pour la pagination)
SELECT * FROM utilisateurs
LIMIT 10 OFFSET 20;
\`\`\`

## Fonctions d'Agr√©gation

\`\`\`sql
-- Comptage d'enregistrements
SELECT COUNT(*) FROM utilisateurs;

-- Comptage avec condition
SELECT COUNT(*) FROM utilisateurs
WHERE date_naissance > '1990-01-01';

-- Autres fonctions d'agr√©gation
SELECT 
    MIN(date_naissance) AS plus_ancien,
    MAX(date_naissance) AS plus_recent,
    AVG(YEAR(CURRENT_DATE) - YEAR(date_naissance)) AS age_moyen
FROM utilisateurs;

-- Groupement
SELECT YEAR(date_naissance) AS annee, COUNT(*) AS nombre
FROM utilisateurs
GROUP BY annee
ORDER BY annee;

-- Groupement avec condition sur groupes
SELECT YEAR(date_naissance) AS annee, COUNT(*) AS nombre
FROM utilisateurs
GROUP BY annee
HAVING nombre > 1
ORDER BY annee;
\`\`\`

## Jointures

\`\`\`sql
-- Jointure interne (INNER JOIN)
SELECT u.nom, u.prenom, c.produit, c.quantite
FROM utilisateurs u
INNER JOIN commandes c ON u.id = c.utilisateur_id;

-- Jointure externe gauche (LEFT JOIN)
SELECT u.nom, u.prenom, c.produit, c.quantite
FROM utilisateurs u
LEFT JOIN commandes c ON u.id = c.utilisateur_id;

-- Jointure externe droite (RIGHT JOIN)
SELECT u.nom, u.prenom, c.produit, c.quantite
FROM utilisateurs u
RIGHT JOIN commandes c ON u.id = c.utilisateur_id;

-- Jointure compl√®te (FULL JOIN) - Pas support√© par MySQL, mais √©quivalent √† :
SELECT u.nom, u.prenom, c.produit, c.quantite
FROM utilisateurs u
LEFT JOIN commandes c ON u.id = c.utilisateur_id
UNION
SELECT u.nom, u.prenom, c.produit, c.quantite
FROM utilisateurs u
RIGHT JOIN commandes c ON u.id = c.utilisateur_id
WHERE u.id IS NULL;
\`\`\`

## Sous-requ√™tes

\`\`\`sql
-- Sous-requ√™te dans la clause WHERE
SELECT * FROM utilisateurs
WHERE id IN (SELECT utilisateur_id FROM commandes WHERE produit = 'Ordinateur');

-- Sous-requ√™te dans la clause FROM
SELECT temp.annee, temp.nombre
FROM (
    SELECT YEAR(date_naissance) AS annee, COUNT(*) AS nombre
    FROM utilisateurs
    GROUP BY annee
) AS temp
WHERE temp.nombre > 1;
\`\`\`

## Mise √† Jour de Donn√©es

\`\`\`sql
-- Mise √† jour d'un enregistrement
UPDATE utilisateurs
SET email = 'nouveau.email@example.com'
WHERE id = 1;

-- Mise √† jour de plusieurs enregistrements
UPDATE utilisateurs
SET date_inscription = CURRENT_TIMESTAMP
WHERE date_inscription IS NULL;
\`\`\`

## Suppression de Donn√©es

\`\`\`sql
-- Suppression d'un enregistrement
DELETE FROM utilisateurs
WHERE id = 1;

-- Suppression de plusieurs enregistrements
DELETE FROM utilisateurs
WHERE date_naissance < '1980-01-01';

-- Suppression de tous les enregistrements
DELETE FROM utilisateurs;
-- ou
TRUNCATE TABLE utilisateurs;
\`\`\`

## Modification de Structure de Table

\`\`\`sql
-- Ajout d'une colonne
ALTER TABLE utilisateurs
ADD COLUMN telephone VARCHAR(15);

-- Modification d'une colonne
ALTER TABLE utilisateurs
MODIFY COLUMN telephone VARCHAR(20);

-- Suppression d'une colonne
ALTER TABLE utilisateurs
DROP COLUMN telephone;

-- Ajout d'une contrainte
ALTER TABLE utilisateurs
ADD CONSTRAINT email_unique UNIQUE (email);

-- Suppression d'une contrainte
ALTER TABLE utilisateurs
DROP CONSTRAINT email_unique;
\`\`\`

## Suppression de Tables et de Bases de Donn√©es

\`\`\`sql
-- Suppression d'une table
DROP TABLE commandes;

-- Suppression d'une base de donn√©es
DROP DATABASE ma_base_de_donnees;
\`\`\`

## Transactions

\`\`\`sql
-- D√©but d'une transaction
START TRANSACTION;

-- Op√©rations
INSERT INTO utilisateurs (nom, prenom) VALUES ('Smith', 'John');
UPDATE commandes SET quantite = quantite - 1 WHERE id = 5;

-- Validation des modifications
COMMIT;

-- ou Annulation des modifications
ROLLBACK;
\`\`\`

## Vues

\`\`\`sql
-- Cr√©ation d'une vue
CREATE VIEW utilisateurs_recents AS
SELECT * FROM utilisateurs
WHERE date_inscription > DATE_SUB(CURRENT_DATE, INTERVAL 1 MONTH);

-- Utilisation d'une vue
SELECT * FROM utilisateurs_recents;

-- Suppression d'une vue
DROP VIEW utilisateurs_recents;
\`\`\`

SQL est un langage essentiel pour travailler avec des bases de donn√©es relationnelles. Que ce soit pour des sites web, des applications d'entreprise ou des analyses de donn√©es, la ma√Ætrise du SQL ouvre de nombreuses opportunit√©s dans le domaine de l'informatique.`
  }
};

// Returns the YouTube embed URL for a language
export const getYoutubeEmbedUrl = (languageId: string | undefined): string => {
  if (!languageId) return '';
  
  const videoInfo = languageVideoMap[languageId];
  return videoInfo?.courseVideo || '';
};

// Opens a YouTube video in a new tab
export const openYoutubeVideo = (url: string): void => {
  if (!url) return;
  
  const youtubeUrl = url.replace('embed/', 'watch?v=');
  window.open(youtubeUrl, '_blank');
};

