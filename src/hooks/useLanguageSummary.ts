
import { useState, useEffect } from 'react';
import { supabase } from '@/integrations/supabase/client';
import { toast } from 'sonner';
import { useAuthState } from '@/hooks/useAuthState';

interface LanguageSummary {
  id: string;
  language_id: string;
  title: string;
  content: string;
  created_at: string;
}

interface UserProgress {
  id?: string;
  user_id: string;
  language_id: string;
  summary_read: boolean;
  quiz_completed: boolean;
  badge_earned: boolean;
  last_updated?: string;
}

export const useLanguageSummary = (languageId: string | undefined) => {
  const [summary, setSummary] = useState<LanguageSummary | null>(null);
  const [progress, setProgress] = useState<UserProgress | null>(null);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<Error | null>(null);
  const { user } = useAuthState();

  useEffect(() => {
    if (!languageId) {
      setLoading(false);
      return;
    }

    const fetchSummaryAndProgress = async () => {
      try {
        setLoading(true);
        
        // R√©cup√©rer le r√©sum√© du langage
        const { data: summaryData, error: summaryError } = await supabase
          .from('language_summaries')
          .select('*')
          .eq('language_id', languageId)
          .maybeSingle();
          
        if (summaryError) {
          console.error('Erreur lors de la r√©cup√©ration du r√©sum√©:', summaryError);
          // Ne pas jeter d'erreur ici, simplement logger pour le d√©bogage
        }
        
        if (summaryData) {
          setSummary(summaryData as LanguageSummary);
        } else {
          // Si aucun r√©sum√© n'existe, on cr√©e un r√©sum√© par d√©faut bas√© sur l'ID du langage
          createDefaultSummary(languageId);
        }
        
        // R√©cup√©rer la progression de l'utilisateur si connect√©
        if (user) {
          const { data: progressData, error: progressError } = await supabase
            .from('user_language_progress')
            .select('*')
            .eq('user_id', user.id)
            .eq('language_id', languageId)
            .maybeSingle();
            
          if (progressError) {
            console.error('Erreur lors de la r√©cup√©ration de la progression:', progressError);
          } else if (progressData) {
            setProgress(progressData as UserProgress);
          } else {
            // Cr√©er une nouvelle entr√©e de progression par d√©faut
            setProgress({
              user_id: user.id,
              language_id: languageId,
              summary_read: false,
              quiz_completed: false,
              badge_earned: false
            });
          }
        }
      } catch (err: any) {
        console.error('Erreur lors de la r√©cup√©ration des donn√©es:', err);
        setError(err);
        toast.error('Erreur lors du chargement du r√©sum√©');
      } finally {
        setLoading(false);
      }
    };

    fetchSummaryAndProgress();
  }, [languageId, user]);

  // Fonction pour cr√©er un r√©sum√© par d√©faut
  const createDefaultSummary = (langId: string) => {
    // R√©sum√© par d√©faut pour Python
    if (langId === 'python') {
      const pythonSummaryContent = {
        id: 'temp-id',
        language_id: 'python',
        title: "Concepts fondamentaux en Python",
        content: `# 1. D√©claration des variables en Python

Qu'est-ce qu'une variable ?
Une variable est un espace m√©moire o√π l'on stocke une donn√©e. Elle permet de conserver une information et de la r√©utiliser plus tard dans le programme.

Imagine une bo√Æte o√π tu ranges un objet. Si tu √©cris "Nom" sur la bo√Æte et que tu mets un papier avec "Yassmine" √† l'int√©rieur, cette bo√Æte devient une variable qui contient la valeur "Yassmine".

En Python, il est tr√®s simple de cr√©er une variable :

\`\`\`python
nom = "Yassmine"  # Une variable contenant du texte
age = 19  # Une variable contenant un nombre entier
prix = 99.99  # Une variable contenant un nombre d√©cimal
est_actif = True  # Une variable contenant une valeur bool√©enne (Vrai ou Faux)
\`\`\`

üí° Remarque importante :

Python d√©tecte automatiquement le type de la variable.

Contrairement √† d'autres langages comme Java ou C, on ne d√©clare pas le type (ex: int, string).

Par exemple, dans Java, il faut √©crire :

\`\`\`java
String nom = "Yassmine";
int age = 19;
\`\`\`

Mais en Python, il suffit de faire :

\`\`\`python
nom = "Yassmine"
age = 19
\`\`\`

C'est plus simple et plus rapide !

# 2. Les conditions en Python

Les conditions permettent d'ex√©cuter des instructions uniquement si certaines situations sont vraies.
Par exemple, si tu veux savoir si une personne peut entrer dans une bo√Æte de nuit, tu vas poser une condition :

Si elle a 18 ans ou plus, elle peut entrer.

Sinon, elle ne peut pas entrer.

En Python, cela s'√©crit comme ceci :

\`\`\`python
age = 19

if age >= 18:  # Si l'√¢ge est sup√©rieur ou √©gal √† 18
    print("Vous √™tes majeur, vous pouvez entrer.")  
else:  # Sinon
    print("Vous √™tes mineur, l'entr√©e est interdite.")
\`\`\`

üîπ Explication du code :

if signifie "si", il teste une condition.

>= signifie "sup√©rieur ou √©gal √†".

else signifie "sinon", c'est-√†-dire que si la condition n'est pas respect√©e, on ex√©cute le code qui suit.

## Ajout de plusieurs conditions avec elif

Parfois, il faut tester plusieurs cas. Par exemple, si on veut classer une note :

Si la note est sup√©rieure ou √©gale √† 18 ‚Üí "Excellent"

Sinon si la note est entre 14 et 17 ‚Üí "Bien"

Sinon si la note est entre 10 et 13 ‚Üí "Passable"

Sinon ‚Üí "√âchec"

Voici le code Python correspondant :

\`\`\`python
note = 15

if note >= 18:
    print("Excellent")
elif note >= 14:  # Sinon si la note est entre 14 et 17
    print("Bien")
elif note >= 10:  # Sinon si la note est entre 10 et 13
    print("Passable")
else:  # Si la note est en dessous de 10
    print("√âchec")
\`\`\`

üîπ Pourquoi elif ?

elif signifie "sinon si", il permet d'ajouter d'autres conditions.

Le programme teste les conditions dans l'ordre et s'arr√™te d√®s qu'une condition est vraie.

## Les conditions multiples avec and et or

On peut combiner plusieurs conditions :

and (ET) ‚Üí Les deux conditions doivent √™tre vraies.

or (OU) ‚Üí Au moins une des conditions doit √™tre vraie.

Exemple avec and :

\`\`\`python
age = 20
argent = 50

if age >= 18 and argent >= 100:  # Les DEUX conditions doivent √™tre vraies
    print("Vous pouvez entrer dans la bo√Æte de nuit.")
else:
    print("Vous ne pouvez pas entrer.")
\`\`\`

Ici, pour entrer :
‚úîÔ∏è Il faut avoir au moins 18 ans ET au moins 100‚Ç¨.
Si l'une des conditions est fausse, l'entr√©e est refus√©e.

Exemple avec or :

\`\`\`python
carte_membre = False
argent = 150

if carte_membre or argent >= 100:  # UNE des conditions doit √™tre vraie
    print("Vous avez acc√®s √† la salle VIP !")
else:
    print("Acc√®s refus√©.")
\`\`\`

Ici, on peut acc√©der √† la salle VIP SI :
‚úîÔ∏è On a une carte membre OU on a plus de 100‚Ç¨.

# 3. Les fonctions en Python

Une fonction est un morceau de code qui r√©alise une t√¢che pr√©cise.
Au lieu d'√©crire le m√™me code plusieurs fois, on le met dans une fonction et on l'appelle quand on en a besoin.

üí° Pourquoi utiliser une fonction ?
‚úÖ √âvite les r√©p√©titions de code.
‚úÖ Rend le programme plus clair et mieux organis√©.
‚úÖ Permet de r√©utiliser le code facilement.

## Cr√©er et utiliser une fonction simple

Une fonction en Python se d√©finit avec le mot-cl√© def suivi du nom de la fonction et des parenth√®ses ().

\`\`\`python
def dire_bonjour():
    print("Bonjour, bienvenue en Python !")

# Appel de la fonction
dire_bonjour()
\`\`\`

üîπ Explication :

def dire_bonjour(): cr√©e une fonction appel√©e dire_bonjour.

√Ä l'int√©rieur, print() affiche un message.

Pour ex√©cuter la fonction, on l'appelle avec dire_bonjour().

## Fonctions avec param√®tres

Une fonction peut recevoir des informations gr√¢ce aux param√®tres.

\`\`\`python
def saluer(nom):
    print(f"Bonjour, {nom} !")

saluer("Yassmine")  # Bonjour, Yassmine !
saluer("Ahmed")  # Bonjour, Ahmed !
\`\`\`

üîπ Ici, nom est un param√®tre, il permet de passer un pr√©nom √† la fonction.

## Fonctions qui retournent une valeur (return)

Parfois, une fonction doit renvoyer un r√©sultat qu'on peut utiliser dans le programme.
On utilise return pour renvoyer une valeur.

\`\`\`python
def additionner(a, b):
    return a + b  # Retourne la somme

somme = additionner(5, 7)
print(somme)  # Affiche 12
\`\`\`

üîπ additionner(a, b) renvoie a + b, puis on stocke ce r√©sultat dans somme.

## Fonctions avec param√®tres par d√©faut

Une fonction peut avoir un param√®tre avec une valeur par d√©faut.

\`\`\`python
def presentation(nom, age=18):
    print(f"Je m'appelle {nom} et j'ai {age} ans.")

presentation("Yassmine")  # Valeur par d√©faut : 18 ans
presentation("Ahmed", 20)  # Remplace 18 par 20
\`\`\`

Si aucun √¢ge n'est donn√©, Python prend 18 par d√©faut.

# Conclusion

On a vu trois concepts essentiels en Python :
‚úîÔ∏è Les variables ‚Üí Stocker des valeurs.
‚úîÔ∏è Les conditions ‚Üí Ex√©cuter un code selon une situation.
‚úîÔ∏è Les fonctions ‚Üí Organiser le code pour √©viter les r√©p√©titions.

Ces notions sont la base de tout programme en Python !`,
        created_at: new Date().toISOString()
      };
      
      setSummary(pythonSummaryContent as LanguageSummary);
      
      // Tenter d'enregistrer ce r√©sum√© dans la base de donn√©es
      // On le fait de fa√ßon asynchrone sans bloquer l'affichage
      saveDefaultSummary(pythonSummaryContent);
    } 
    // R√©sum√© par d√©faut pour Java
    else if (langId === 'java') {
      const javaSummaryContent = {
        id: 'temp-id',
        language_id: 'java',
        title: "Concepts fondamentaux en Java",
        content: `# 1. D√©claration des variables en Java

Qu'est-ce qu'une variable ?
Comme en Python, une variable en Java est un espace m√©moire o√π l'on stocke une donn√©e.

Cependant, en Java, contrairement √† Python, il faut toujours pr√©ciser le type de la variable.

Syntaxe pour d√©clarer une variable en Java

\`\`\`java
int age = 19;  // Une variable enti√®re (int)
double prix = 99.99;  // Un nombre √† virgule (double)
boolean estActif = true;  // Une valeur bool√©enne (true/false)
String nom = "Yassmine";  // Une cha√Æne de caract√®res (String)
\`\`\`

üìå Diff√©rence avec Python :

En Python, on √©crit juste nom = "Yassmine", et Python devine que c'est une cha√Æne de caract√®res.

En Java, on doit obligatoirement dire que c'est un String.

## Les types de donn√©es en Java

Voici les principaux types que tu dois conna√Ætre :

Type | Description | Exemple
--- | --- | ---
int | Nombre entier | int age = 25;
double | Nombre √† virgule | double prix = 9.99;
boolean | Vrai ou Faux | boolean estVrai = true;
char | Un seul caract√®re | char lettre = 'A';
String | Texte | String nom = "Yassmine";

# 2. Les conditions en Java

Les conditions permettent d'ex√©cuter du code seulement si une certaine situation est vraie.

## La condition if...else en Java

Prenons un exemple simple :

\`\`\`java
int age = 19;

if (age >= 18) {
    System.out.println("Vous √™tes majeur, vous pouvez entrer.");
} else {
    System.out.println("Vous √™tes mineur, entr√©e interdite.");
}
\`\`\`

üîπ Explication :

if (condition) ‚Üí V√©rifie si la condition est vraie.

else ‚Üí Ex√©cute ce code si la condition est fausse.

System.out.println() ‚Üí Affiche du texte √† l'√©cran.

üìå Diff√©rence avec Python :

En Python, on utilise print() au lieu de System.out.println().

Java utilise des {} pour entourer les blocs de code, alors que Python utilise l'indentation.

## La condition if...else if...else

Imaginons qu'on veut classer une note en fonction d'une grille :

\`\`\`java
int note = 15;

if (note >= 18) {
    System.out.println("Excellent");
} else if (note >= 14) {  // Sinon si
    System.out.println("Bien");
} else if (note >= 10) {
    System.out.println("Passable");
} else {
    System.out.println("√âchec");
}
\`\`\`

üîπ Ce qu'il faut retenir :

else if permet d'ajouter d'autres conditions.

Le programme s'arr√™te d√®s qu'une condition est vraie.

## Les conditions multiples avec && et ||

Comme en Python :

&& (ET logique) ‚Üí Les deux conditions doivent √™tre vraies.

|| (OU logique) ‚Üí Au moins une des conditions doit √™tre vraie.

Exemple avec && (ET logique)

\`\`\`java
int age = 20;
int argent = 50;

if (age >= 18 && argent >= 100) { 
    System.out.println("Vous pouvez entrer dans la bo√Æte de nuit.");
} else {
    System.out.println("Vous ne pouvez pas entrer.");
}
\`\`\`

üí° Explication :
‚úîÔ∏è La personne doit avoir plus de 18 ans ET au moins 100‚Ç¨.
‚ùå Si l'une des conditions est fausse, elle ne peut pas entrer.

Exemple avec || (OU logique)

\`\`\`java
boolean carteMembre = false;
int argent = 150;

if (carteMembre || argent >= 100) { 
    System.out.println("Vous avez acc√®s √† la salle VIP !");
} else {
    System.out.println("Acc√®s refus√©.");
}
\`\`\`

üí° Explication :
‚úîÔ∏è Si la personne a une carte membre OU si elle a 100‚Ç¨ ou plus, elle peut entrer.

# 3. Les fonctions en Java

Une fonction (appel√©e "m√©thode" en Java) est un bloc de code qui effectue une action pr√©cise.

## Cr√©er une fonction simple

En Java, une fonction est d√©finie avec :

Un type de retour (void, int, String, etc.).

Un nom de fonction.

Des parenth√®ses () avec ou sans param√®tres.

Un corps de fonction {} qui contient le code √† ex√©cuter.

Exemple d'une fonction sans param√®tres

\`\`\`java
public static void direBonjour() {
    System.out.println("Bonjour, bienvenue en Java !");
}

// Appel de la fonction
direBonjour();
\`\`\`

üîπ Explication :

public static void ‚Üí Mot-cl√© utilis√© pour d√©finir une fonction en Java.

direBonjour() ‚Üí Nom de la fonction.

void signifie que la fonction ne retourne rien.

## Fonctions avec param√®tres

Une fonction peut prendre des informations en entr√©e (comme en Python).

\`\`\`java
public static void saluer(String nom) {
    System.out.println("Bonjour, " + nom + " !");
}

// Appel de la fonction
saluer("Yassmine");
saluer("Ahmed");
\`\`\`

üí° Explication :

La fonction saluer() prend un param√®tre nom de type String.

Elle affiche "Bonjour, Yassmine !" si on appelle saluer("Yassmine").

## Fonctions qui retournent une valeur

Une fonction peut renvoyer un r√©sultat gr√¢ce au mot-cl√© return.

\`\`\`java
public static int additionner(int a, int b) {
    return a + b;  // Retourne la somme
}

public static void main(String[] args) {
    int somme = additionner(5, 7);
    System.out.println(somme);  // Affiche 12
}
\`\`\`

üí° Explication :

additionner(int a, int b) prend deux nombres et retourne leur somme.

On stocke le r√©sultat dans somme et on l'affiche.

## Fonctions avec param√®tres par d√©faut ?

üí° En Java, il n'y a pas de param√®tres par d√©faut comme en Python.
On doit cr√©er plusieurs versions d'une fonction (surcharge de m√©thode) :

\`\`\`java
public static void presentation(String nom) {
    System.out.println("Je m'appelle " + nom + " et j'ai 18 ans.");
}

public static void presentation(String nom, int age) {
    System.out.println("Je m'appelle " + nom + " et j'ai " + age + " ans.");
}

// Appel des fonctions
presentation("Yassmine");  // Prend 18 ans par d√©faut
presentation("Ahmed", 20);
\`\`\`

Ici, la premi√®re fonction suppose 18 ans par d√©faut, et la deuxi√®me permet de pr√©ciser l'√¢ge.

# Conclusion

On a vu trois concepts essentiels en Java :
‚úîÔ∏è Les variables ‚Üí Stocker des valeurs en pr√©cisant leur type.
‚úîÔ∏è Les conditions ‚Üí Ex√©cuter un code en fonction d'une situation.
‚úîÔ∏è Les fonctions ‚Üí √âviter les r√©p√©titions et organiser le code.

üí° Diff√©rences avec Python :

En Java, on d√©clare toujours le type des variables.

Java utilise des {} au lieu d'indentation.

Pour afficher du texte, on utilise System.out.println() au lieu de print().

Les fonctions en Java s'appellent m√©thodes, et elles doivent toujours √™tre d√©finies dans une classe.

Java est plus strict que Python, mais il est tr√®s puissant et utilis√© dans les grandes applications !`,
        created_at: new Date().toISOString()
      };
      
      setSummary(javaSummaryContent as LanguageSummary);
      
      // Tenter d'enregistrer ce r√©sum√© dans la base de donn√©es sans bloquer l'affichage
      saveDefaultSummary(javaSummaryContent);
    }
    else {
      // R√©sum√©s par d√©faut pour d'autres langages peuvent √™tre ajout√©s ici
      setSummary(null);
    }
  };

  // Fonction pour sauvegarder un r√©sum√© par d√©faut dans la base de donn√©es
  const saveDefaultSummary = async (summaryContent: any) => {
    try {
      const { error } = await supabase
        .from('language_summaries')
        .insert([{
          language_id: summaryContent.language_id,
          title: summaryContent.title,
          content: summaryContent.content
        }]);
        
      if (error) {
        console.error('Erreur lors de l\'enregistrement du r√©sum√© par d√©faut:', error);
      } else {
        console.log('R√©sum√© par d√©faut enregistr√© avec succ√®s');
      }
    } catch (err) {
      console.error('Exception lors de l\'enregistrement du r√©sum√© par d√©faut:', err);
    }
  };

  const markAsRead = async () => {
    if (!user || !languageId) return;
    
    try {
      let progData = progress;
      
      if (!progData) {
        // Cr√©er une nouvelle entr√©e de progression
        progData = {
          user_id: user.id,
          language_id: languageId,
          summary_read: true,
          quiz_completed: false,
          badge_earned: false
        };
      } else {
        progData.summary_read = true;
      }
      
      const { data, error } = await supabase
        .from('user_language_progress')
        .upsert([progData], { onConflict: 'user_id,language_id' })
        .select()
        .single();
        
      if (error) throw error;
      
      setProgress(data as UserProgress);
      toast.success('R√©sum√© marqu√© comme lu !');
    } catch (err: any) {
      console.error('Erreur lors de la mise √† jour de la progression:', err);
      toast.error('Erreur lors de la mise √† jour');
    }
  };

  return { summary, progress, loading, error, markAsRead };
};
