
// This file is automatically generated. Do not edit it directly.
import { createClient } from '@supabase/supabase-js';
import type { Database } from './types';

const SUPABASE_URL = "https://tgjtkmduelappimtorwe.supabase.co";
const SUPABASE_PUBLISHABLE_KEY = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InRnanRrbWR1ZWxhcHBpbXRvcndlIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDAzOTQ1NTAsImV4cCI6MjA1NTk3MDU1MH0.4MT-8B_L86nFmGsrnDN612BIdL6gM1mrgenaFnbXHd0";

// Import the supabase client like this:
// import { supabase } from "@/integrations/supabase/client";

// Configure the Supabase client with enhanced error handling
export const supabase = createClient<Database>(SUPABASE_URL, SUPABASE_PUBLISHABLE_KEY, {
  auth: {
    autoRefreshToken: true,
    persistSession: true,
    detectSessionInUrl: false,
    storageKey: 'supabase.auth.token',
    storage: localStorage,
    flowType: 'pkce'
  },
  global: {
    headers: {
      'x-application-name': 'codeacademy'
    }
  },
  realtime: {
    params: {
      eventsPerSecond: 2
    }
  }
});

// Enhanced error handling wrapper for auth operations
export const authWithRetry = async (operation: () => Promise<any>, maxRetries = 3) => {
  let lastError;
  
  for (let attempt = 1; attempt <= maxRetries; attempt++) {
    try {
      return await operation();
    } catch (error: any) {
      lastError = error;
      
      // If it's a database permission error, don't retry
      if (error.message?.includes('permission denied') || 
          error.message?.includes('Database error') ||
          error.code === 'unexpected_failure') {
        throw error;
      }
      
      // Wait before retrying (exponential backoff)
      if (attempt < maxRetries) {
        await new Promise(resolve => setTimeout(resolve, Math.pow(2, attempt) * 1000));
      }
    }
  }
  
  throw lastError;
};
