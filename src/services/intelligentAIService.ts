
import { nlpService, StudentQuery } from './nlpService';

export class IntelligentAIService {
  private generateSmartPrompt(query: string, analysis: StudentQuery, code?: string): string {
    let systemPrompt = `Tu es un assistant IA p√©dagogique sp√©cialis√© en programmation. Tu dois aider les √©tudiants avec patience et p√©dagogie.

CONTEXTE DE LA QUESTION:
- Type: ${analysis.type}
- Langage: ${analysis.language || 'non sp√©cifi√©'}
- Niveau: ${analysis.difficulty}
- Intention: ${analysis.intent}
- Mots-cl√©s: ${analysis.keywords.join(', ')}

R√àGLES IMPORTANTES:
1. Utilise un ton amical et encourageant
2. Explique simplement, √©tape par √©tape
3. Donne des exemples concrets
4. Propose des exercices si appropri√©
5. D√©tecte les erreurs communes chez les d√©butants

`;

    // Adapter le prompt selon le type de question
    switch (analysis.type) {
      case 'bug':
        systemPrompt += `
L'√©tudiant a un probl√®me technique. Tu dois:
- Analyser le code s'il est fourni
- Identifier l'erreur probable
- Expliquer pourquoi √ßa ne marche pas
- Donner la solution √©tape par √©tape
- Proposer des bonnes pratiques pour √©viter ce probl√®me
`;
        break;

      case 'concept':
        systemPrompt += `
L'√©tudiant veut comprendre un concept. Tu dois:
- Expliquer clairement avec des analogies simples
- Donner des exemples de code
- Montrer les cas d'usage
- Proposer des exercices pour pratiquer
`;
        break;

      case 'exercise':
        systemPrompt += `
L'√©tudiant cherche de la pratique. Tu dois:
- Proposer des exercices adapt√©s √† son niveau
- Donner des projets progressifs
- Expliquer les objectifs d'apprentissage
- Fournir des indices sans donner la solution compl√®te
`;
        break;
    }

    if (code) {
      systemPrompt += `\n\nCODE FOURNI PAR L'√âTUDIANT:\n\`\`\`${analysis.language || 'text'}\n${code}\n\`\`\`\n`;
    }

    systemPrompt += `\nQUESTION DE L'√âTUDIANT: ${query}`;

    return systemPrompt;
  }

  public analyzeAndRespond(query: string, code?: string, language?: string): {
    analysis: StudentQuery;
    prompt: string;
    suggestions: string[];
  } {
    // Analyser la question avec le NLP
    const analysis = nlpService.analyzeQuery(query);
    
    // Ajuster le langage si fourni explicitement
    if (language) {
      analysis.language = language as StudentQuery['language'];
    }

    // G√©n√©rer un prompt intelligent
    const prompt = this.generateSmartPrompt(query, analysis, code);

    // G√©n√©rer des suggestions proactives
    const suggestions = nlpService.generateSuggestions(analysis);

    return {
      analysis,
      prompt,
      suggestions
    };
  }

  public getWelcomeMessage(): string {
    return `üëã Salut ! Je suis ton assistant IA de programmation.

üß† **Ce que je peux faire pour toi :**
- üêõ T'aider √† corriger tes bugs
- üìö T'expliquer les concepts difficiles  
- üí™ Te proposer des exercices adapt√©s
- üéØ Te guider dans tes projets

üí¨ **Tu peux me parler naturellement !**
- "Mon code marche pas"
- "Comment faire une boucle en Python ?"
- "Je veux m'entra√Æner sur les fonctions"

üöÄ **Langages support√©s :** Python, Java, JavaScript, C, C++, PHP, SQL

Pose-moi ta question ou partage ton code !`;
  }

  public generateExerciseSuggestions(language: string, difficulty: string): string {
    const exercises = {
      python: {
        beginner: [
          "Calculatrice simple",
          "Jeu de devinette de nombre",
          "Gestion d'une liste de courses"
        ],
        intermediate: [
          "Gestionnaire de contacts",
          "Analyseur de fichier texte",
          "Mini-jeu du pendu"
        ],
        advanced: [
          "API REST simple avec Flask",
          "Web scraper avec BeautifulSoup",
          "Syst√®me de gestion d'inventaire"
        ]
      },
      javascript: {
        beginner: [
          "Calculatrice interactive",
          "Todo list simple",
          "Galerie d'images"
        ],
        intermediate: [
          "Application m√©t√©o avec API",
          "Quiz interactif",
          "Syst√®me de notes"
        ],
        advanced: [
          "Application de chat en temps r√©el",
          "Dashboard d'analytics",
          "Mini e-commerce"
        ]
      }
    };

    const langExercises = exercises[language as keyof typeof exercises];
    if (!langExercises) return "Je peux te proposer des exercices adapt√©s √† ton niveau !";

    const levelExercises = langExercises[difficulty as keyof typeof langExercises];
    if (!levelExercises) return "Dis-moi ton niveau pour des exercices personnalis√©s !";

    return `üéØ **Exercices ${difficulty} en ${language} :**\n\n` + 
           levelExercises.map((ex, i) => `${i + 1}. ${ex}`).join('\n') +
           '\n\nChoisis celui qui t\'int√©resse et je t\'aiderai √† le r√©aliser !';
  }
}

export const intelligentAI = new IntelligentAIService();
